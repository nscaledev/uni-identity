openapi: 3.0.3
info:
  title: Unikorn Identity API
  description: |-
    The Unikorn Identity API provides an OIDC compliant interface for use with all
    Unikorn services and proxies.  As it's intended use is for multi-tenant cloud
    deployments it acts as an aggregation layer for other 3rd party OIDC services,
    dispatching login requests to the required OIDC backend.
  version: 0.1.0
paths:
  /.well-known/openid-configuration:
    description: |-
      Implements OIDC discovery.
    get:
      description: |-
        Reads the OIDC discovery page identifying all the required endpoints, and
        supported algorithms.
      responses:
        '200':
          $ref: '#/components/responses/openidConfigurationResponse'
  /oauth2/v2/authorization:
    description: |-
      Implements OAuth2 authorisation grants.
    get:
      description: |-
        Provides authentication and authorisation as per the OAuth2 specification.
        This particular implementation requires a "code" type response, and PKCE.
        You may specify the "openid" scope in order to have an OpenID Connect
        identity token returned during code exchange.
      responses:
        '200':
          $ref: '#/components/responses/authorizationResponse'
        # TODO: returns HTML not JSON
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'
  /oauth2/v2/token:
    description: |-
      Implements OAuth2 code exchange.
    post:
      description: |-
        Provides authorisation code to access token exchange as per the OAuth2
        specification with the "authorization_code" grant. If requested during
        authentication, and OpenID Connect identity token will also be returned.  
        The "password" grant type is also supported for applications where using
        a web browser in the authentication flow would be impractical, for example
        with automated command line client based tooling, however this is not
        recommended as it exposes credentials to the API, and not only with a trusted
        3rd party identity provider.
      requestBody:
        $ref: '#/components/requestBodies/tokenRequest'
      responses:
        '200':
          $ref: '#/components/responses/tokenResponse'
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '401':
          $ref: '#/components/responses/unauthorizedResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'
  /oauth2/v2/login:
    description: |-
      After the user hits the authorisation endpoint, a dialog is presented to
      get the user's email address, control is returned back to the identity
      service via this address in order to perform email domain matching and
      delegate autorization to the correct identity provider.
    post:
      description: |-
        Sends the users's provided email address to the identity service.
      requestBody:
        $ref: '#/components/requestBodies/loginRequest'
      responses:
        '302':
          description: A redirect to the specified identity provider URI.
  /oidc/callback:
    description: |-
      Implements the OIDC response code callback.
    get:
      description: |-
        The Kubernetes Service OAuth2 implementation does not provide any direct
        authentication or authorisation.  It instead delegates to a 3rd party
        identity provider.  This endpoint allows a 3rd party authorisation code
        to be returned to the Kubernetes Service and exchanged for an identity token.
      responses:
        '302':
          description: A redirect back to the browser with an authorisation code.
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'
  /oauth2/v2/jwks:
    description: JSON web key set endpoint.
    get:
      description: |-
        Returns an array of public keys used to verify JWT tokens issued by
        this server, for example identity or authorisation tokens.
      responses:
        '200':
          $ref: '#/components/responses/jwksResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'
  /api/v1/organizations:
    description: |-
      Allows management of organizations.  Organizations are identified by an
      email domain.  The email domain is used to route login requests to a
      back-end provider e.g. Google or Microsoft.  The provider may allow
      configuration that in turn allows configuration of fine-grained access
      control based on group information from the identiy provider.  At present
      a user can be the owner of one organization, and must be a member of
      that domain.
    get:
      description: |-
        Returns a list of organizations that are owned/managed by the user.
      responses:
        '200':
          description: A list of organizations.
        '401':
          description: Invalid credentials were provided.
  # TODO: we need to make this so it's only allowed from trusted sources,
  # otherwise we leave ourselves open to abuse in some way shape or form.
  # This is intended to be the gateway onto the platform, so it comes into
  # play when self-service is required.
  #  post:
  #    description: |-
  #      Allows creation of an organization.
  #    requestBody:
  #      $ref: '#/components/requestBodies/createOrganizationRequest'
  #    responses:
  #      '201':
  #        description: The organization was successfully created.
  #      '401':
  #        description: Invalid credentials were provided.
  #      '409':
  #        description: The organization already exists.
  /api/v1/organizations/{organization}:
    description: |-
      Allows management of organizations.  Organizations are identified by an
      email domain.  The email domain is used to route login requests to a
      back-end provider e.g. Google or Microsoft.  The provider may allow
      configuration that in turn allows configuration of fine-grained access
      control based on group information from the identiy provider.
    parameters:
    - $ref: '#/components/parameters/organizationParameter'
    put:
      description: |-
        Allows an organization to be updated.
      requestBody:
        $ref: '#/components/requestBodies/updateOrganizationRequest'
      responses:
        '200':
          description: Organization successfully updated and returned.
        '401':
          description: Invalid credentials were provided.
        '403':
          description: The user is forbidden from updating the organization.
  # TODO: in order to create a group, we'd need to know from the identity
  # provider what groups are available, and to do that we'd need to have
  # the access token available.  We could pass it around in our access token
  # using JWE, but then that has the knock on effect of having to worry about
  # key distribution to resource servers.  The other option is to cache the
  # result in Redis or something.  A final option is to read the groups on
  # login by a domain owener, as that's the only time they can be updated,
  # and cache the results in the custom resource for use later on, but then
  # that does lead to split-brain/race conditions with multiple owners.
  /api/v1/organizations/{organization}/groups:
    description: |-
      Allows management of organization groups. Groups provide an identity
      mapping from a group defined by the identity provider to ones that will
      be added to authorization tokens issued by this service.  A resource
      server may use group information to implment scoping of resources.
    parameters:
    - $ref: '#/components/parameters/organizationParameter'
    get:
      description: |-
        Returns a list of groups that are defined for the organization.
      responses:
        '200':
          description: A list of groups.
        '401':
          description: Invalid credentials were provided.
    post:
      description: |-
        Allows creation of a new group.
      requestBody:
        $ref: '#/components/requestBodies/createGroupRequest'
      responses:
        '201':
          description: Group successfully created and returned.
        '401':
          description: Invalid credentials were provided.
        '403':
          description: The user is forbidden from creating groups.
        '409':
          description: The group already exists.
  /api/v1/organizations/{organization}/groups/{groupid}:
    description: |-
      Allows management of organization groups. Groups provide an identity
      mapping from a group defined by the identity provider to ones that will
      be added to authorization tokens issued by this service.  A resource
      server may use group information to implment scoping of resources.
    parameters:
    - $ref: '#/components/parameters/organizationParameter'
    - $ref: '#/components/parameters/groupidParameter'
    put:
      description: |-
        Allows a group to be updated.
      requestBody:
        $ref: '#/components/requestBodies/updateGroupRequest'
      responses:
        '200':
          description: Group successfully updated and returned.
        '401':
          description: Invalid credentials were provided.
        '403':
          description: The user is forbidden from creating groups.
        '404':
          description: The requested group does not exist.
    delete:
      description: |-
          Allows the deletion of an existing group.
      responses:
        '204':
          description: Group successfully deleted.
        '401':
          description: Invalid credentials were provided.
        '403':
          description: The user is forbidden from deleting groups.
        '410':
          description: The requested group does not exist.
components:
  parameters:
    organizationParameter:
      name: organization
      in: path
      description: An organization name.
      required: true
      schema:
        type: string
    groupidParameter:
      name: groupid
      in: path
      description: A unique group ID.
      required: true
      schema:
        type: string
  schemas:
    oauth2Error:
      description: Generic error message.
      type: object
      required:
      - error
      - error_description
      properties:
        error:
          description: A terse error string expanding on the HTTP error code. Errors are based on the OAuth2 specification, but are expanded with proprietary status codes for APIs other than those specified by OAuth2.
          type: string
          enum:
          # Defined by OAuth2
          - invalid_request
          - unauthorized_client
          - access_denied
          - unsupported_response_type
          - invalid_scope
          - server_error
          - temporarily_unavailable
          - invalid_client
          - invalid_grant
          - unsupported_grant_type
          # Proprietary
          - not_found
          - conflict
          - method_not_allowed
          - unsupported_media_type
          - forbidden
        error_description:
          description: Verbose message describing the error.
          type: string
    openidConfiguration:
      description: OpenID configuration.
      type: object
      required:
      - issuer
      - authorization_endpoint
      - token_endpoint
      - jwks_uri
      - scopes_supported
      - claims_supported
      - response_types_supported
      - token_endpoint_auth_methods_supported
      - grant_types_supported
      - id_token_signing_alg_values_supported
      - code_challenge_methods_supported
      properties:
        issuer:
          description: The OpenID Issuer (iss field).
          type: string
        authorization_endpoint:
          description: The oauth2 endpoint that initiates authentication.
          type: string
          format: uri
        token_endpoint:
          description: The oauth2 endpoint that is used to exchange an authentication code for tokens.
          type: string
          format: uri
        jwks_uri:
          description: The oauth2 endpoint that exposes public signing keys for token validation.
          type: string
          format: uri
        scopes_supported:
          description: A list of supported oauth2 scopes.
          type: array
          items:
            $ref: '#/components/schemas/scope'
        claims_supported:
          description: A list of supported claims 
          type: array
          items:
            $ref: '#/components/schemas/claim'
        response_types_supported:
          description: A list of supported response types that can be requested for the authorization endpoint.
          type: array
          items:
            $ref: '#/components/schemas/responseType'
        token_endpoint_auth_methods_supported:
          description: A list of supported authentication methods for the token endpoint.
          type: array
          items:
            $ref: '#/components/schemas/authMethod'
        grant_types_supported:
          description: A list of supported grants for the token endpoint.
          type: array
          items:
            $ref: '#/components/schemas/grantType'
        id_token_signing_alg_values_supported:
          description: A list of signing algorithms supported for ID tokens.
          type: array
          items:
            $ref: '#/components/schemas/signingAlgorithm'
        code_challenge_methods_supported:
          description: A list of code challenge methods supported.
          type: array
          items:
            $ref: '#/components/schemas/codeChallengeMethod'
    scope:
      description: Supported scopes.
      type: string
      enum:
      - openid
      - email
      - profile
    claim:
      description: Supported claims.
      type: string
      enum:
      - aud
      - email
      - email_verified
      - exp
      - famility_name
      - given_name
      - iat
      - iss
      - locale
      - name
      - picture
      - sub
    responseType:
      description: Supported response types.
      type: string
      enum:
      - code
      - token
      - id_token
      - code token
      - code id_token
      - token id_token
      - code token id_token
      - none
    authMethod:
      description: Supported authentication methods.
      type: string
      enum:
      - client_secret_post
      - client_secret_basic
    grantType:
      description: Supported grant type.
      type: string
      enum:
      - authorization_code
      - refresh_token
    signingAlgorithm:
      description: Supported signing algorithms.
      type: string
      enum:
      - ES512
    codeChallengeMethod:
      description: Supported code challenge methods.
      type: string
      enum:
      - S256
      - plain
    loginRequestOptions:
      description: Login request options.
      type: object
      required:
      - email
      - query
      properties:
        email:
          description: The user's email address.
          type: string
        query:
          description: The query string supplied to the authorization endpoint.
          type: string
    tokenRequestOptions:
      description: oauth2 token endpoint.
      type: object
      required:
      - grant_type
      properties:
        grant_type:
          description: Supported grant type.  Must be either "code" or "password".
          type: string
        code:
          description: Authorization code. Required with the "code" grant type.
          type: string
          nullable: true
        client_id:
          description: Client ID. Required with the "code" grant type.
          type: string
          nullable: true
        redirect_uri:
          description: Client redirect URI. Required with the "code" grant type.
          type: string
          nullable: true
        code_verifier:
          description: Client code verifier. Required with the "code" grant type.
          type: string
          nullable: true
        username:
          description: Resource owner username. Required with the "password" grant type.
          type: string
          nullable: true
        password:
          description: Resource owner password. Required with the "password" grant type.
          type: string
          nullable: true
      oneOf:
      - required:
        - code
        - client_id
        - redirect_uri
        - code_verifier
        properties:
          grant_type:
            enum:
            - authorization_code
      - required:
        - username
        - password
        properties:
          grant_type:
            enum:
            - password
    token:
      description: Oauth2 token result.
      type: object
      required:
      - token_type
      - access_token
      - expires_in
      properties:
        token_type:
          description: How the access token is to be presented to the resource server.
          type: string
        access_token:
          description: The opaque access token.
          type: string
        id_token:
          description: An OIDC ID token.
          type: string
        expires_in:
          description: The time in seconds the token will last for.
          type: integer
    jsonWebKeySet:
      description: |-
        JSON web key set. This data type is defined by an external 3rd party standards
        committee. Consult the relevant documentation for further details.
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/jsonWebKey'
    jsonWebKey:
      description: JSON web key. See the relevant JWKS documentation for further details.
      type: object
      items:
        description: JSON web key.
        type: object
  requestBodies:
    loginRequest:
      description: Information necessary to resolve a federated SSO provider.
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/loginRequestOptions'
          example:
            query: response_type=code&client_id=861847a4-a524-40cc-b073-f895111f40a8&redirect_uri=https%3A%2F%2Funikorn.spjmurray.co.uk%2Foauth2%2Fcallback&code_challenge_method=S256&code_challenge=jcCPNhhtZw4R5HAXVyZhH-7oRscnVnRYzJjfNEOchIM&scope=openid+email+profile
            email: joe.bloggs@acme.com
    tokenRequest:
      description: OAuth2 token request, consult the relevant OAuth2 and OIDC specifications for further details.
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/tokenRequestOptions'
          example:
            grant_type: authorization_code
            client_id: e58d490e-62f8-49a3-b7d0-b9beb615dabb
            redirect_uri: https://example.com/oauth2/callback
            code: eyJhbGciOiJFQ0RILUVTIiwiY3R5IjoiSldUIiwiZW5jIjoiQTI1NkdDTSIsImVwayI6eyJrdHkiOiJFQyIsImNydiI6IlAtNTIxIiwieCI6IkFic05hU1ByY3Y5RVJsWmFrOHVDc2V0T2F2aTJ4bS1taXFPWjVvQmFNR2ptc05Cbi04aE84QU9DbGR2OVM3dDlydTBEbDhabzFEcThxOEM5WUp0WGJfa0YiLCJ5IjoiQWU3VS1DcktsY3RJOXYzM0RsTWFsS0ZBZk9YcC1QeV9zZ0Y5Tjdaa05NQkRDRkVKb0FrRy1FTnhTczI2ME5memg4SnJnSnBRbUFFWHhvZ0poWHp2YWZMQSJ9LCJraWQiOiIxZHh3c29KUlZEQmxTYmxvSm93dDlJTkJwdGJTb21XUlBZck5LeWNFQV9RIiwidHlwIjoiSldUIn0..urRmbxH2_bn8LMla.Yw0a3qstHMAKnxawkIYntHcvOCjaxjzvV1JlmYM-2CTbC1i2VtAsNIKoOlFJ56H2N08pMY9OpZ2cukCHP1BQxsKMsc41VwlIZYvjFrzWIEeDoF92FmpCRGWztuwchBWd7PEQYpfeJFJ2BegacGheQqfRXX35RNDy-ZOc4dWkuvFrV8ISuA8-7_ce7Ha25SrRuSRarTfM_BLA1uDA_P9AWjhsyGKOK2FkuaDU0XmXlLWDz6dKdKy9RJtR_nUUcsljtaImJXjNNPAmJq10nJ501EK_I6M9B3TRUrqalOBm4ks7-vmF_gcE1saOv2AciE9P2BMkc635kaD3C5HlyWT95Skd6C_FwppjQUvYUY0y7Eq2NpnVfkX4uSPm8fUD4brSjGWnHMNE8z4M2_PlM4KSZAieLRmMAjY5xW8XY_uCXr5nb-8SmA_P-ljCVOPPAXDXExa2xSxbAJvrYqWeuG2IvAkC0ab6pojlqUmkRWvOX5tnXQav5vO2qOAgCYUhSIWXz0-Y8hczRUSgDTyQm59yU7xqVqCiywChgXlO32KwhhnrfLxNlrMB45XOlzhJP1c3DCg7ZW7bO_Q7A08GjvrXxTm7gUDr-jsdW9hTSiNJQu__zSMFPVVNTqnz1MDFIeusi6GJi9VC0A_ouXsdhcNKn6jeIDV9dnMxCcjbQT5qsCEqo-UcCGvH0_w4aChpldMg8HGPeUSZhaBSL1yns_I0C9AADFe9dmXN6wCHBu8JCy-T4FoeXRlVSKVuG2GJi8sfzAFFh6iKhQXxHm5KNA_iorBJVEOSX3dL6KOUXfdsBfTzg3aMoEyp2bJ9NaactGmFyJZM9e6MxS8UxgN6KHe7Gduc0NGFyBru3ClMq2BzchOxbzDQ_oi5YoSuxLpgGl3xiJfNnClqFTqXMJ75uSk0_OkKgvmHea9QGRaasx5XALSpap_ckCZvNYjG_oZh404-KTjpa2iJgENczeUT2F4jq59rCCAUFZVfyu3qtBAeJme4VghnbTvaITJbpFeBUySgYKcuGQ.uvQMjilUi8JcdyGe3Lbatg
            code_verifier: ZWQ0MGJjZGYyNThkZDYyM2QwNzQyOTY0NGM0ZWZjMzU5ZjRmMDkzZjVkNDJkNjVhNjAxZDYzZTVkYzY0MmNjZQo
    createOrganizationRequest:
      description: Body required to create an organization.
      required: true
      content:
        application/json:
          schema:
            type: object
    updateOrganizationRequest:
      description: Body required to update an organization.
      required: true
      content:
        application/json:
          schema:
            type: object
    createGroupRequest:
      description: Body required to create a group.
      required: true
      content:
        application/json:
          schema:
            type: object
    updateGroupRequest:
      description: Body required to update a group.
      required: true
      content:
        application/json:
          schema:
            type: object
  responses:
    badRequestResponse:
      description: |-
        Request body failed schema validation, or the request does not contain
        all the required fields.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/oauth2Error'
          example:
            error: invalid_request
            error_description: request body invalid
    unauthorizedResponse:
      description: |-
        Authentication failed or the access token has expired.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/oauth2Error'
          example:
            error: access_denied
            error_description: authentication failed
    forbiddenResponse:
      description: |-
        Request was denied by authorisation, this may be caused by the authorisation
        token not having the required scope for an API, or the user doesn't have the
        necessary privileges on the provider platform.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/oauth2Error'
          example:
            error: forbidden
            error_description: user credentials do not have the required privileges
    notFoundResponse:
      description: |-
        Unable to find a resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/oauth2Error'
          example:
            error: not_found
            error_description: the requested resource does not exist
    conflictResponse:
      description: |-
        Resource conflicts with another, usually this means they have the same name.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/oauth2Error'
          example:
            error: conflict
            error_description: a resource with the same name already exists
    internalServerErrorResponse:
      description: |-
        An unexpected error occurred, this may be an unexpected transient error and
        may succeed on a retry. If this isn't the case, please report it as an issue.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/oauth2Error'
          example:
            error: server_error
            error_description: failed to token claim
    openidConfigurationResponse:
      description: |-
        OpenID configuration used for auto-discovery of endpoints and supported
        algorithms and features.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/openidConfiguration'
    authorizationResponse:
      description: |-
        A login form to request federation data from the user.
      content:
        text/html: {}
    tokenResponse:
      description: |-
        Authentication was successful and returns an authorisation token. The response
        may optionally include an OIDC identity token if that scope was requested.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/token'
          example:
            access_token: eyJhbGciOiJFQ0RILUVTIiwiY3R5IjoiSldUIiwiZW5jIjoiQTI1NkdDTSIsImVwayI6eyJrdHkiOiJFQyIsImNydiI6IlAtNTIxIiwieCI6IkFic05hU1ByY3Y5RVJsWmFrOHVDc2V0T2F2aTJ4bS1taXFPWjVvQmFNR2ptc05Cbi04aE84QU9DbGR2OVM3dDlydTBEbDhabzFEcThxOEM5WUp0WGJfa0YiLCJ5IjoiQWU3VS1DcktsY3RJOXYzM0RsTWFsS0ZBZk9YcC1QeV9zZ0Y5Tjdaa05NQkRDRkVKb0FrRy1FTnhTczI2ME5memg4SnJnSnBRbUFFWHhvZ0poWHp2YWZMQSJ9LCJraWQiOiIxZHh3c29KUlZEQmxTYmxvSm93dDlJTkJwdGJTb21XUlBZck5LeWNFQV9RIiwidHlwIjoiSldUIn0..urRmbxH2_bn8LMla.Yw0a3qstHMAKnxawkIYntHcvOCjaxjzvV1JlmYM-2CTbC1i2VtAsNIKoOlFJ56H2N08pMY9OpZ2cukCHP1BQxsKMsc41VwlIZYvjFrzWIEeDoF92FmpCRGWztuwchBWd7PEQYpfeJFJ2BegacGheQqfRXX35RNDy-ZOc4dWkuvFrV8ISuA8-7_ce7Ha25SrRuSRarTfM_BLA1uDA_P9AWjhsyGKOK2FkuaDU0XmXlLWDz6dKdKy9RJtR_nUUcsljtaImJXjNNPAmJq10nJ501EK_I6M9B3TRUrqalOBm4ks7-vmF_gcE1saOv2AciE9P2BMkc635kaD3C5HlyWT95Skd6C_FwppjQUvYUY0y7Eq2NpnVfkX4uSPm8fUD4brSjGWnHMNE8z4M2_PlM4KSZAieLRmMAjY5xW8XY_uCXr5nb-8SmA_P-ljCVOPPAXDXExa2xSxbAJvrYqWeuG2IvAkC0ab6pojlqUmkRWvOX5tnXQav5vO2qOAgCYUhSIWXz0-Y8hczRUSgDTyQm59yU7xqVqCiywChgXlO32KwhhnrfLxNlrMB45XOlzhJP1c3DCg7ZW7bO_Q7A08GjvrXxTm7gUDr-jsdW9hTSiNJQu__zSMFPVVNTqnz1MDFIeusi6GJi9VC0A_ouXsdhcNKn6jeIDV9dnMxCcjbQT5qsCEqo-UcCGvH0_w4aChpldMg8HGPeUSZhaBSL1yns_I0C9AADFe9dmXN6wCHBu8JCy-T4FoeXRlVSKVuG2GJi8sfzAFFh6iKhQXxHm5KNA_iorBJVEOSX3dL6KOUXfdsBfTzg3aMoEyp2bJ9NaactGmFyJZM9e6MxS8UxgN6KHe7Gduc0NGFyBru3ClMq2BzchOxbzDQ_oi5YoSuxLpgGl3xiJfNnClqFTqXMJ75uSk0_OkKgvmHea9QGRaasx5XALSpap_ckCZvNYjG_oZh404-KTjpa2iJgENczeUT2F4jq59rCCAUFZVfyu3qtBAeJme4VghnbTvaITJbpFeBUySgYKcuGQ.uvQMjilUi8JcdyGe3Lbatg
            token_type: Bearer
            id_token: eyJhbGciOiJFUzUxMiJ9.eyJhdF9oYXNoIjoidGJHNlFHek5WZE5fcjZ6Y0EzRlFyQzllNmVPbUpPN3lrSjFsTFBxNUJ0RSIsImF1ZCI6WyI5YTcxOWUxZS1hYTg1LTRhMjEtYTIyMS0zMjRlNzg3ZWZkNzgiXSwiZW1haWwiOiJqb2huLmRvZUBlbWFpbC5jb20iLCJleHAiOjE2OTE1NzM4NzEsImlhdCI6MTY5MTQ4NzQ3MSwiaXNzIjoiaHR0cHM6Ly9rdWJlcm5ldGVzLmVzY2hlcmNsb3VkLmNvbSIsInBpY3R1cmUiOiJodHRwczovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyLzhmNmU5NjI3NGMyYWJmNjE3YTM5ODdlNzRlOWU3NTdlIiwic3ViIjoiam9obi5kb2VAZW1haWwuY29tIn0.AYxSoAwkuKfBpp5o1spmAyqzhkSR76hbjF1OCKe4iLS6BCP9ySZYeV-kBCd0t3cd6VxbO5FVQJPRt8k0q88rc21JATyV8kScNnr-1jFmAJuXO6ga021KTRQnG68D8zZN9LwmMSRh3HPFtOq4LCcmQES2adeJysoG998mmtuTwp4fArwa
            expires_in: 3600
    jwksResponse:
      description: |-
        A JSON web key set. This is a set of named public keys that are referenced by JSON
        web tokens. The public key can be used to verify that a token was signed by this
        service.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/jsonWebKeySet'
          example:
            keys:
            - use: sig
              kty: EC
              kid: 1dxwsoJRVDBlSbloJowt9INBptbSomWRPYrNKycEA_Q
              crv: P-521
              x: AGWAbuKBnn0qXsj8iddWhZj5-ZTM4F4d5rJeKbblOGVc-5nJNURsPb7k-MhEqr9QAi5jKnd7lkmkHU2mnalwsQPK
              y: AAepClWS8MoLLCzqMQ2bl3KwzF7eSYLhcSrsk8kYuRaNN45mnVuQsH43QOILEB5XXaHhySSRgVCamMwZWUwArv1k
