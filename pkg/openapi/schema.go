// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/L8AAAD//6Y2G5FfCQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
