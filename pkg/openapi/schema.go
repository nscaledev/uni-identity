// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
