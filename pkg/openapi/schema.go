// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/y8AAP//LPNLR+YJAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
