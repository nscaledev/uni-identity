// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"acf6x4//FwAA//+8enzIDcoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
