// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"p5N5+CeExbdv/z8AAP//fZqOD1AaAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
