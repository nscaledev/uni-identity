// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"SNfCxELRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
