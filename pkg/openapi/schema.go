// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3x4lH9rNcW1yY/fblWWtJa9qk6ZeX43SL72XaX01Qs8tpoOSY9Cbswm+Kamx82A0Zy+dK13plU2llJ0o",
	"KZnJeh3eFVFjcpNqtG+S9VUtU1/d0Iqhj7VSJVdr97O19lOmvnpK11pzBJ7rK7YucNeU1bta7mFZsLRe",
	"VVeNrK7ddlcPRnfVT4111ahTJd2dPhj1mcLWgq/MfrqZVI0Omw/R7ppzdUVmD2ktrS2zWDXKqf5zc6wi",
	"Pq9Z//llrN2Wlw+rsVE3Otn6pJKu39aW/V7VqE9u0v12Ldu41vT6qqk3ep10va1xv1hNdxGfn1EgCspO",
	"lVS36O6D008VbKYHiv1FixTnU+d+eGWaWZKkplFcvq3G01bzMjdWJuVko3QPM+ihlbsqPRaWrZc+7Cam",
	"VyVNttOqlusulEa23H2qPjbt/FR+y+ctNZWsFtvLbn7aUuvYSiQnZaNYdZ4buRGQU8n7dvMJ3+by1/nV",
	"S73wMDdqreY4ffdYthtvmYeSajzdtFJAg9UlJbeFQt4wbKc9NzPDojUHPDVxaEE6/qfMkLZ6dyU3b+T0",
	"S6rZVW+q3XqKpJrpJm5Ps8vmTXJaMwrmyx1J1nv1VQ0lLfXGbAJ50W52qlet9ktb05+yLb2Zg9fac02e",
	"Ljudwo02zV4rd+Wadjtu1O+0dOtmDDrX3ZtusnwDDHlthnQK1pOcnarTbq+ZrKLuqpxtlLX75mQ876Sv",
	"asCov/Un1Uy9d7Pqd8ZPjRs987x6uXpO11edVFJu3HRXfb1ZU67LbXXS7Ldk1i6z7KZMDLr9VPPW7LZu",
	"tWpfTpIermY7y6RTLwXNkOqqmexngFxZ9qfNYXdVzLx0qxV1Un1uppqPtdvxomtknzsduwxumu1ur5DU",
	"nvvp5k3WCpohWi9rglRhqaDkRLktJF9K2ZlqqDMVP1kAazI3URqVy/xzXpXHy5ZqDa4vL3K3I/sh01Kr",
	"Vl7PkAW57MzANHH/TOq23bl+WhgvuDJVq9f5JxMMYLUxz7Umvbt0qVWY6NOXZmmU1i47yUs7och0lkgm",
	"e47R0zuzy2aZXmaUGzC1Ch2YSrS62si5BsWHuxutMCrNHh7furkr4+kh3bJIuTfqOpc1iOSOjIgFczcJ",
	"eJ8YKPalcduR5frzbXs2eqxN+7cv07n1nIdqNb8Ek4dE0k4k6snlqN28TcPrTgZP6zfVm3Imab9dFcal",
	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
