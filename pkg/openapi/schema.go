// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"lyKIvR/KAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
