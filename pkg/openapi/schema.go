// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9a3Paurc4/FU8PGdmnzMDqbkG+uYcwi2QAOEe+KUPI9sCBLbsWDK3Tr/7fyTZYIMh",
	"kHZ3t7t51QbLsrTua2mtpa8R1TQsE0NMSeTz14gFbGBACm3+19Q2HQtpT96P7DcNEtVGFkUmjnyO5CUH",
	"o1cHSnyoVC3eRKIRxJ5YgM4i0QgGBox89maKRCM2fHWQDbXIZ2o7MBoh6gwagM1MNxYbSqiN8DTy7Vs0",
	"YgKHzhJPtrnUoF0tnlsHlsRgybLNJdKgfXot3ohq8drl2FOA0Rawb765Gt/Y00sJznjlcizbnEOVnl+J",
	"5I46Cw4xzZWfJ9BeIhXmVdV08FurcAdLQIw+vZrDWa9clEOgzWY6T7IE2hIbdWIN3iRXffubGAwJvTM1",
	"BDn/qDYEFFYY7bfFM/6riSnE/L/AsnSkcvR/mhO2vK++T/yXDSeRz5H/79OeRz+Jp+QTZ6iBjSgU3w7u",
	"8c7UNpK3domakliJBASf3hzt7FvUXeyToIbLlwvXwLB0yP5rQAo0QPnaXVAam5hLXxFGMhZUd3KFRD7/",
	"J6JpGszk4CSmKOlELJWNp2M5mIMxALVsOqNm5PTtJPKFk9tFYHE/dhIw7vYkF1XSXt6FwkQ3pwi/DYt1",
	"bLVaxSambcQcW4dYNTU2SQA40ABIj3yOzE14o+jmdEr+D6gGvFFNIxKNEAoogxfc1GZKRUVNVKv2ttV4",
	"A1VJFbfTaqGaqS6s536hlruBm9pWG1RRE1XX9XldbnSHyWZxsaqiFVKMMh11+OAlqKSm7UpOZ7+DQVmu",
	"zs11o1tK1Of1dL1Y3UxaN52J/rBetWudOnx4KCda3dRkZdVhbZLMPDUXmU2tPwZai5BVWo1cjAQ/1Joc",
	"8iQMF1XMICYkJIYqJATYG0asNiSmvmTUOoEatAGFmtTpNHeiPRRVe13BhvxodgvOfj3fHamn0D0EhV+B",
	"v/vdnPiWKJ6YtqSZCE8lQp3J5GYvB41NzB0ccwdHLufE4F7eIakO1hkKMGou4A/iT1VHENMx0hgXprNa",
	"KifDWCYxycZSOZCMKbeaHFNyClQy8bQGFCUSjbBpgjxbbsnt6mOv32UsN0y209W5iTq61mN/jwbpOfu7",
	"1a3GGwut2O1USdXor8CmmoGbmq3dL8QcG/Z7Y6Ohaqaq52mjW12z9yGXAWWkyulZL363GSaH6Xa/RgZG",
	"2W7e94tqoi93E+UE6NZSSidOwXP5aTDvL1tGudFOWFSV0wUFySlQyqZavVxRqbQTzX49qRX1jda9KynF",
	"GVC25ZLana2bpXp60LPkQaU2AfIQPRZqfC+tQS/Z78SL6oKSYbJdaz4Pt3W5TbqDMunIo7vRIjdUC/EW",
	"7Oe2I3mY7s41AOR0o7VoF9uL/oMil+32Jl7u4llX3VYT9VLagMY01cE13MF3baVXLg/uZ8uRbJmDeysx",
	"HIzqrU4t91io2WDQ4iJvdD9LqoncQ08flVrGujs01suOkWP7qHUXtZVWqXWVRPy5p9+N1EX6EQ4a5VY/",
	"12Yw1O711Q4nWL65cey2oazvE2MFZx/rOrgZrmSQfCX0vp5/wGuwWlSHmN6ry2ZhDtbz7bIfr+nGsB5L",
	"FLpKIY4SfZonjeqD2dTLtXTmPtGQs1Z9mGtao4TqLAr3T/G71po81ImaivdXenU0XM7L9nZQLcGiWc4l",
	"yoZVaFcGW+qs1NndQLt9KrWG1gTWyrXEHZwCtTKDrddJ+/k5mW43ipvYqKmmtMHCWZbtfrbacfLZ2O1Y",
	"hbf3IJHu2G2n0wZ2d1If3z3m404xP37K5QfzGdlUHpoPifLCAcWe/Gw864+D4jajPWgPm1y7Rttj3Oup",
	"RJ9TUDVqz/NG4ylv1F7jMq6l5XjpYVzN1HN3yW67Z78CvXlnpBbkNrY0yuOpWooT0Fwm8ioq5Z4Sd/WF",
	"mkmmF6CYLKTv9c2gm0t3FlqmMC6vLGve6i2HvaG8uS29JhoW7k8Wzymn82RkJ71iSrE788oA39cbpew2",
	"VU+Mn/R66qEzyiP42Dbq+fkwvR5kn4djp/Bsp7ESy3aM/Pgpps8L/ebTU/65+Fxag8S6s1bytaU9fB1A",
	"p5KoLvOLggyUjGXO9deesWgPls3nNMXPLbBML5uJ12Z+Whj2Zp3q4Hkrx4bZmbpt9zrTYnfTMtK5Te92",
	"/dp/LaDNqjCbPuvNZOJhNZthe/K4buh2/S6Vfm7q21ntKa4mi4Xp7WhwqzTHrdu8nK3Ml/bzumvcTntF",
	"OzYn2iA363ZQo9ZyxuNtp15+6vcb3Ve8jdeL5Sp0CMpUaijXL8j5sek8E22mNh5wZg6rxX5Ow/V1QZ0r",
	"rW76lRRKr2aspxYqy3t5vEqBwszStfo0e195gr3OaAbuOo/xDSbjqlzI5fPFMsxpxnMjsyrc3znZWmET",
	"66bKJnxu6/3OQ9+pJCo1lCWTbb5cnmXQw6z1vL430g+N/BiZ9l2tX2p2npPaY+ah2XueaORu0t1Ok6Bu",
	"ljZWQqnlGgCotGKUN7VRPQcz9XUn21tPG5mHe3hb0RxVblTKmzvbSRb0+mvibqvOmmtlW2yNTZQemh1n",
	"/WhNK3pyjWqTBi7or+Xu63O9dpt2Ogt53Fw8TJfGPQS5VqUNAFmnn/OPHQtYY3VRGC0bw3llbI5mKTkV",
	"e+jOLZBAtWmpoW5hr5sop+av6ZxdKOR75VF/snGSr/QuD2sGTPWnM6x0l6DarSlWGd71Np3p8EF1Kq0b",
	"Z9mqz5HeQ9maqm0qMPmoADp1hf54CW00Qcy7iIwGLbleqc1HleGm0Z0tRsXhpp5orRrb1qbZHcqNSl0e",
	"DUbz+raXHs3bRr242I7m/UWjWFs05v1ZY55fj4rD7ajbXwy3Q7luNOajlhmJRqY2wHTs+hnMejBt11Uc",
	"c83D9KGGbKjSsWOjyOfIjFKLfP70ydVqzLR0DZdPKtB1BaiLy404v2o9Y8Q189ys4aM9qzoqqSYmjk4l",
	"OoOSDXW4BJhK7lCANalZLRYk5g2giaujCbdDJo5NZ9CWNEgB0sNtcsfSfhGnSqzkrFMlhjR9bv4Pt0x9",
	"c1+/9GCg4swWPvzCAEwItL/DPOf7rBb5TmUAFJCVtVjmFk5iqdtcLqZktFwsnZskb2FChQmgRb7sbPK5",
	"OcM3mgn3zuPFMGCLvs4EZ2+E7J+HOohlYiLCHEDV2+7f18HBT3v8EdYsE/FQ5H++BkKHJBKNmBbzBbkg",
	"+vwfN1zBFwe0iEemEbY5HVIY+fLtSzTCrXmgKQmYiqdiccAgnM7mYkoumYwBTc7Ek1pCu81OIvt4Gv92",
	"6EoQntiAUNtRqWPDUyvyfTibyUAgp2OJTDodS8UVNZaNJ9MxLZdTMgmopRSYiXz7cjECgaqH4S8v6YhQ",
	"yZwwVwkSwqQvtU0mPr9Fg4rjBJooXNNPM2rokc9fQ+dnDj0T0IZwzwWPuM45c98Zd0sT2zS4xBdk8y0q",
	"UPc+0vDLDA5YZOIu4mhIyIlUTE7HkvFuPPU5Hv8sy6OIB/J4KjHJpOKx24mWiaWAkouB7G06lkyl1Fuo",
	"AE1NJ/cOLohRCIzIQWSXzaOlMrKsZWAM5jLpWEpJpWIgK2dj2dRESUxAMnMrJyJREUomyMQITzsUUId4",
	"8WX2I9T8ws02dejy/EWzfxFihr8wASr8P7FazvNXSD4XB0ALJx0Rt0eYIy6oCzwEkvdg8D8fKHwThV+u",
	"wiE5z/tiDLeiQlHJ2Ltk26b9ThkwhRjaSJXuu/VHCbKJJAtMIZ97vlqQ97H5Am6EiFXtJVPDsXQiHolG",
	"FpwS4tp6Rcxau1+80zuKbtbMFc1VG3cWVTqmMWg/De3Gw0Yt5cct9g7dRD5HSoUIB3rkc4QgZq+v2eor",
	"g7ziPNxhLL8+k3kWadpgNpqnY6NuPVVOaWm7Bh8URW9W+mosjWuNXps8KbeLWH1WerVzrTxKzx+wdqsv",
	"jMV9L2FgoK9I6+khEo2wb+bz0Crog062bj4+Frav9VZC0ZMPq235FnaGjzO1Y5NFdjF02qDRSKUN3Hda",
	"5D6VbDWrj6W79PMzuJ9tOp32tF8ARn01GvRWeXsZX1yjGxhsB1B5gJsOpOGUUus0G9IKKtICbiQC6Y3U",
	"nSEiIcKDbZyIGFNpkuUoOlLZMCLRGaASsJkZP4E2xCrUJGXD53rBbDJu+RM2F/S9KKkASwpXBdyk4A7T",
	"xp3N9RZWgEgETbGYkc4QecFu0I9T1WFE95dVI1PTnOowhjSIKaKbnySMRMCyWmSMEo/LmVwymc1kUjHL",
	"VGU1G9emZOJotmwrjjWXHezYc3VJ4wl4AyyL3Ig1M+nkAtM9iECEONyv9ZxJN/zqvSFMzovJ8hCHJ9RQ",
	"SHj8iAB+aTX0B5LAl/fRwBtq7IAOhA1rWhAjrWDiCZo69jlL9jv86ONvhMY7LIirRWZi78cJKcc0L3Co",
	"GdMQUc0ltDdsPztHgsc9iGNZpk2h9oKBPjVtRGeGeDKBgDkV7n4D8YJf13xWDRhTTdu6kmw10wD82N31",
	"YfkE/j13RczLHRf1Z2x8jigZqCZScS0Gk0oqlgITNQZuAYilZXmiKpm0rGXhNRIqAOvT8unQnvL/8Gtb",
	"yL8ylr68B01viRD/0BtJqpuEcp+USGRmOrommVhnFhCUTAyjjCmhLQHNQJgwu4VZIVACuh6cSTKFk2Tp",
	"gDJX+MYXM/iFmdQXafs5SmkfxIOTtJxTtXhMvYWZWCoxycYAgLcxIMfjmZSmZmRNfUcQ77Qz6w7wY+aX",
	"Zs3fADdfrkTOG7zpjeIoYu70z8PPQcDX5WLB94hQG1BTRHvfgUhPJsSEFLkIK5eDlsMpHK6u38ZHSCtE",
	"Z6ciOeGpJT9RakGYSk+SKSWWy2TTsZSsZWPZ20QqlkiqyXginVBBKnM29eRv5hD3968REUTtMhf1F0/I",
	"ikbg2kL2RkA+HZOTsXiqG898jssc8u9N1hHUcYrggtlDHgWEENkHeYWR19+DstM68QBhJARRP1lH/mtQ",
	"9eV9uHpDRYYjbEMoNJofAZE/LiAiMO8FRLTwAImbrPEeeSvU3Zge67uPZMaPZMaPZMaPZMaPZMZ/bTIj",
	"t3AgGSMc+ZzMyDJT9aGqoLftretIuDozrZwzh88Nk8kerVK7b+jle7hID0al9ESdjzJDubRt6+VNa6vr",
	"DaP/pPSsp0ZStzvzMumW79aNXk1uc31Rjo8K1cxgU00Pu+q6OeitR534bNidxh+77Vl9XqLDbnVT78jb",
	"+rytN7bT5GgwWjS2U/TcYTooPgODFVvgq5KYOY9Geznq3enKoGwphfRcSchM1uvwPo+a81Ki2S3FG9t6",
	"qrEtkaqhz7RCNVPvDtP1bivV2LaS9c4KgefGlu0L3Ldl9b6eedzkbG1Q01UjrWuV/vbR6G+HiZmuGg2i",
	"JPuLR6OxVNhe8J01TLbjqtFj6zG1+/ZK3ZrLx6SW1DZprBrlxPC5PVMRX9dy+DyaaZXy5nE7MxpGL92Y",
	"V5ONSn0zHNSMxryUHHbr6WZR0xvbtt4c9JKNrsbdRjXZR3x9Rs5UUHqhJPp5Fw7OMJGjTA/kh+uOmV8t",
	"nIfJnWWlzTixjPzmdTtbdNq3mZkyL8ebhQeYQo+dzF3hKbfpjIawH1vcFTSZJlUt018rzXS536o9tWl2",
	"Ib9ms7aaiNfy3U0/u+ioDWzH4vOyka85z83MFMiJ+EO33cKVTLaY3Y4auceVUe+0Z8n7pzJtvqYeC6rR",
	"KnUSQIO1DTEruVzWMKjTXVmpSd5eAZ7ENbEhmf1TZkhXvb+T2yU5OUq0+2qp1m8kzEQ72cbdRXrTLsUX",
	"dSNnje7NeGPQ2NZR3FZLVhvI6267V7vrdEddTW+lO3o7A4vac11ebHq9XElbpIvKfbmuVWbNxr2W7JRm",
	"oFfsl/rxcgkY8t4M6eXslpxeqIv+oB2vof62nG6WtYf2fLbqJe/qwGi8Due1VGNQ2g57s1azpKeet6O7",
	"52Rj20vE5Wapvx3q7bpSLHfVeXvYkdm41KafsDDoDxPtitXvVLTaUI6bA1xL9zZxp1HwmyG1bTs+TAG5",
	"uhku2pP+Np8a9WtVdV57bifaT/XKbN030s+9Hi2DUrvbH+Ti2vMw2S6lbb8Zog3SFkjkNgqKz5VKLj4q",
	"pJeqoS5V3LIB1mRuojSrt9nnrCrPNh3VHhdvbzKVKX1MddSandVT5tq87S3BIvbwbDYo7RVba2OEqwu1",
	"Vsy2LDCGteYq05kP7pOFTm6uL0btwjSp3fbitzSmyGQZi8cHjjHQe8vbdpncppQSWNi5HkzEOn1t6hRB",
	"/vG+pOWmheXj02s/c2e0HpMd2ywPpn3ntg6R3JORacNMKQYfYmOF3hqVniw3nivd5fSpvhhWRouV/ZyF",
	"ai27AfPHWJzGYo34ZtptV5Kw2EvhRaNUK5VTcfp6l5sVhoSM8z2jgKtEbpeB1Xdit7OH6TzT3WpNnMmv",
	"nua2AzarpV5db+dlq14dAGVq9vJP21cw7jRtvRIDt51cvO4kZ9v2rZLWy0+JbrbSTpltc0Z6Dbs9ornq",
	"dOTkaxW1X79NGTJNJUfLWueh2E7L0LiNbWt2Op161XTwnH11EjO6psPenV6MPW3XqxRZOcYqlkym67Ut",
	"IM9PlULJ7hYnKbjtPN8VlCpJV+9TqtIeP23p3auy6HdHieGTs7lVm+3qQwtts7peHxVWyCYJoN3e3y8d",
	"/bE8revpTi+jLzPbGYq1hl1F1rpLNVtUH+5nFX2+KbZoYbhZl8qxitNL9p9R8T6LK/c13Uj00+05aBtd",
	"q7WY5/E4cZfr6dm77GrVibebzYLW7VuqqnVAvCyn0LaahsNuM15NkTUFyipnx0pyIrvJaP0mNTpPljoB",
	"82y2dJcbD7WnJMwO7KnW28rj2lPJ1DaDXtvA6So2C5WM2RwuHXPSR53nWuq5Sef10u1yNsWpTWvS1KHS",
	"xUpf72e2w0xfVxJ3T/i2/9zvFvLLbZUak6U+LCfVaSrmLOLxReyx2+m0ZEPT9Uxmiled+9d5o1U1Fnix",
	"svqFrmE4FtTnFVlpDXo0XkuQVLOxxI/4qZy1dYzt5uCusFzhejKpNROzTW5FZahZD7FqPalXOk8oiZ7j",
	"qVI3ZVpljEbK40jpIquwehptlx1Ymel1+Pzc3U7Tr06j1XCsFa1q5enQqAEVJ+U4bJvtm2bHes3fVjVn",
	"kb+N3T/SeqrQ7rUirjPp1R3cQWBD+8qygVCP1qEziKnriYrkH4f7nhNH50fgNqSOjYkEsOQmrRIxls8p",
	"Moy8vOMXbICNZPLJga5vJIRV3dF4RjsvLvACD26uEZqI3COimhbkH3ezWKHGHWgHo4Vp45iqm442Vk0b",
	"jg2A8NhaTMemBTGw0Fg1DcPEY+YwWxRqfnc7uFWxUJEkOwNEUiDEkvca3+oK6bqkQGni6BOk6+xXssHq",
	"zDax6RB9c/OCh6YjsT1apq67dRTEdGwV8gkMEyNq2hKiRBIBK55/wBCiw1089opdKUBzU9nfF0bgGYE8",
	"R3oJdKSN3f0zG5M9GQch5EFHMTWGOv7KFYnsl29LLCuEHNv+FUwAYjgQ80t8NXyjUcnNpvTWq5mQSNik",
	"PMUaIPzCiG83gufPTxDUNXIt+FUTT3SkfifwvVlOQB3saWiF6IyvmwAD8rQ/Ceg2BNpGgmtEKPnZ2HDX",
	"5e1AHGZJAJt0Bu2o5BCHszmdISIZEGDCVr+RZmAJg/u4FvIT01aQpr03fOaBfjfNCdjznhOqDblYAjqR",
	"NJMT0m4DOwKybLREOpxC8s9wBBOOGsRIpGUGJHHUhT/YMOGlAp73xHM3YXDgCxZi190hwtPgHoUY5hlT",
	"WMo/VXeMxsHEuAz/tYfNC963B9hDZ5eP4TV8CSRmXAERhCm0MdA70F5C+1yO9IW0QPhELqTDycGVONR0",
	"9ZOqA2T8XHznseRguLagyrSSyOg2VdWxbagFEQ0CI6kNMEEQU/cdgDWhjbk6hxrDC5M01N7cSNWJmAlx",
	"hDJ0qYDAqGTpEBBGEJZpUwlRCXC9zyPt1+IPm7RsOlj7PqRhk44nbJoTGPOpAajtBelOI3Cx+XMx2MNA",
	"0SEjognCmrQX79dC0MFelRD8Tii6pwlCfpxSQ0FLULDCT6b9sCV4MsitohKMyew3ESVzDUXy3lT0X6vo",
	"L7+v0mL/QXhivvP8yNF8J2Oe2X0TwNKNabvRxsjneDIeT2TjuVs5GkGAej/I4gdCLp2MOMqJbjpXwYZt",
	"/K3mNEAxHbpXT7s6Nz+h7CD53lPZH0seX66BwRsnkHzIjS81wSv6DOsuE16KKBS+yHS2oG0gQnhypjje",
	"taBN3Y5ZU91UgH5BIWRpV6B5kIt7wbsdthgtMMMue+3qtx+52P8W9RqCmYpX1exbZXgfnjBA+aAj7KO9",
	"qmEfOIaYoIFwF9R90e1ldtCxLFi++ua2m/vBXq8zURL8n4g7v2+6L+fBQa6mHJ6XR6FBriCNyB4pwLbB",
	"xl3EbiOhffsOvr7bE1sAxI5xUelxCKyDELx8+3ugXgOC/R7DYXDIAUfr2TlkHPzarozhPPdC/4TXMDDS",
	"3iDhalHYkcJx4LIUMsl7c0zXB8TJm07uF3aCMsOY+gyS7AvBcym+QiTSEdYcOqtDOjNDQNXxykqkA9vK",
	"4C+QAPGKPlcEqjakY8vkMZrgjwogSGWA1cnYfcLmDaVr4bicWREfEFgBsxiibj8891+voYrmWgnRyAQY",
	"SN+MXdEyRUuIvT+Y1SBMhWhEN1WgQy/tKBqxkFebz+yD0AWbGizMgK5DPIVvA5QNl1RvfBhAO4l0hn1Z",
	"BwiHfpH3cRHFEqe/wwftRPweVCFdX1yU+IIJRwdo4cvwDIyv54uIpWoxSLzhNeOihefRZw7pdl9/fnKm",
	"1Yz3jgHasUTx56r9IKfAbywIvvOEHVtl3fugL6vszdLsDht4KHh2S3cnCpM8+7dPAecYJLsi9DdyDjlG",
	"Hl2n1C1Dv/yVg814Hz25CdFZ5TyKhd7kfpZQmT8H4Z6w/gdQ+zazXa4mfI0cjrlsX/59/EV/3feN1IEw",
	"2JapNnjoSJqpOgbE1PWHw1sxnRAIgfkjIaA4+iFYrH52Ql+hOm8ywuaS2B9wgtzKcYAluBYhPClpa5IF",
	"bLqRCAVYA7ZGXjCjA0QphDdSIawx1UWbD5Kp6Fvw9TLM+ZBzhLow8IT1Tz0C0iPvyeIdTIiTsDCTTLSd",
	"DTOumEz4i0h8hAQ0zYaET4AdXQcKc0tFz+MjEe9FXMOnhWtLVxHdx2U9pfbmvG4T3LBJ+SNJDOVVtDo6",
	"Cj27zbY9W+xt01B8L4x5Q8rWw5wFt6PZbqe/syILbvndYi9kmguatR/Da5/JHUYO4ql7yOu1kIu6dZ0z",
	"cyW42FfYyXROoCW7ucL8rMXNon7B/Hh4Yzq82QXA7msT0755wZFQw5ctocMt5rOLFEb1z12cl7Eetixx",
	"PM4HRBlvIpWfrK1m0OaxZAvaojDOoaa0r2W3oQ4oWsJwp8v74Roa4ybxkbsmVh7dE8DbVBZuW7O9cm1h",
	"TvbZAH6C84xskcQfiUYMpNomMSc01H4OawF9sVD4zUyfv0UYnDWGjssaLjSLwjqMHNtHYd0djlYT1tvh",
	"GE1BnwyejPAx+nN3tQsPcD5GGFEEKCQH3jr7lAg6Rz5HHBtFTrnbZLzrI3EOpOTAB78UoruzyEMg8tan",
	"O1947PrCly0m3I/er/FifIf576Fup9c89Wpo8Vf3nbTEOZDfqrjQXPe8/pDVeVnWY4KmGOHpGOjT8RLo",
	"zsWrFe9Jvi4i+w2wlVeLXmemSxfsTpn3Zgxd9zm9IrinyodI/40IEbkw/xOqLuarBRFtay/mG7i2TAKJ",
	"12XKAwFvU8WRxRG1z965hJ+8fLL3UYr3Ntczbq8st/HV/qjYo6PTVupF6PG+dYqkRJz82h24gL4yyM6H",
	"hy1CEPV7ZCLZtQqDa3UGmIxw8wB94UwuRHaoJpcgOLgiHse8TnCRN2Kr3ysnfHHdEIB6R5RvwRRp6h6i",
	"HiSnkCmbw3NMgAMHl3+RXZvX87A8Zaid0IdHxBC2GZ8cCKHgEHV3hmMvxfUp3XCpVL5AD4baQod9ht68",
	"NernepP29/iOfk/03cbi4SRvAegYLF7LotCwBA9ziBGMr4+7ZPgYYGYSeurUVLgLBYdQ0xDNjg4/N2CI",
	"I5C6qU+uk8oVBJRU90WmoT3RIaaUDIDBlDsJvmW9YB78gjzXhwTzDqL8QN0hzMeJShUxi9sIFPC2juKU",
	"im3XdujshQkDqX2XL4Tq5OPmTpej3VNL/iZQYWioFj3g7+NDJttCVKRx8vM9Ht+j0Da8EJ9DXIB7dv7N",
	"C65OpAnQxYuIiP6UDCgSkBQH6Uz07b4R5QngtiO+gvmoIDG9YK8dvWRiGAoebzIea7mgHY5v8CE/HEHu",
	"LYYId3GL/C/FIwuHzvzqCTOxFErqkpTXZqZ6oNFesJdYC7x+WcCGTB/rDkFLqG8koGlQk5YI8CgfUhF1",
	"4/sGNBRokxmyJCmPNclwCH3BjDKB9BcTpzGE2Xt/uZHKG0kqClY80qoHSzDARvSffsHsu3QGkR2MWUb5",
	"17wexirg7ODy2bHnT6J89hdsAIuIXB5XKAiiOA4VSFKAAw8W7EZeXzBx1BnjOmQEIQMsC+GpsBM81tud",
	"7zE0RKKe4PryBlOeDjocK47fLeLwo1XI+WhDoEXcxaGGo1aBxwabv0fZmdsYf+dIsbuHd2PJ//5pEIXk",
	"hvkOsN88KGPjQg9XAjdBvIWh34yJfhBmzrLOvoPbhVwT6NoXyjBBrXpKxc3MFRPRumkuHCtgQUQFskTu",
	"YFQSWmdnA3iNy73RLxjeTG9ca+lT3Yv5upP4WYVNdWgneBk/oYFkkbx4kI/45UzY4a2skGCAIZDGI3JB",
	"RLqHr2xfeCdS4A/fQ7caLmy0/1ds4vA0NtvU4SnZxp79g67KKXoPI3TRUe9cghcbcHlsxoPKqbjMORzv",
	"Yy8ebkWw2pcjZdnmBOnhGAlt3RayMwxXYVcq/ma6J7hbIej8LbuueFe8c05MihFh9BPSfO3tmzY/wP1j",
	"wH3KcDhsTRi4X+zvMidCd3nJ4vjIkNMlf/fJEPlk4qmkoyXU2Ey+OhV/7NmLoGq+CruDYoUQQeJ1uwuN",
	"ZnDf3N2Cqy2IpDlQBGwtZMNA/ISZSjGKwgIoBwTgfvVtrJ802E51pPRC8L+0xRbGYNcossPOgucC2Ud9",
	"BS+N9od0mgzRc4fHR+dU3tHplV/9lTrpeCJc1+0TFM9tlI86m8KKJWAriNrA3rjDL8plpeFsKdoy7u5A",
	"JI5OTzH2+MQUPIhvgVcHXsiobtOm0KQHZEBm+BKomlgjvsMJ3nZAB4Rf+uybG2EKp6LLw77/U1hqQ7VY",
	"2J0s3oSfpwX6+JzZpjvyzFz+PhSHE90zZ+CwVg/x8J/CHANIIKZuga2/jkCU5r6dGub7djSIugD8w1gy",
	"7OLMo/WbfpLxnxmFZUGNw8ojCiK7qFq8kdpeWfWuqv+F2/UvkYO08jcz8MSN1l9DqiX3J5dszI/+pu9C",
	"1RP75H6KN+pHft5/y+pF6fmSVHcI5XoW8STR3ZdN9n8LELIybe0lEh5Edh+fKbkxVxjakjcwfK/7r1y7",
	"3+CdsSeg7Q2Seu3qjwT2G+IhH5QKu/ORwGvXftMh0A4vkjuAuDfwx0L8QLD4yC1MeFxd3Hy0qYob7hDF",
	"+QYkBExhlHeGARQputv7QwigkHzh8FnzEoU2ge6sbh4uXFsAa+x/biuG+273yR0ipARvpiCOERRARG8A",
	"NtDNkQtY6FFJcah74sDm9cDP1mcjSIWu5q1u2OQioJ5/qhKJ9whhFjCb3CTQm1ecHYlv+Q2M4x41/gJ4",
	"t+RpL/d3xewO3h3xjgPH0MzScOcU7n70sAcEhYZl2sBG+mbsYLAESNDM/sXdV70fOKUcfNVHPdFAxwJf",
	"5xdxHD1mT4Gum6ujpRtQQ8CbZN+3JMzgCinfP6SMPrQVBnOX0iTxVPFafvAZ3ta3p3tlfCeXLBwF2hhS",
	"SB6BAvU+0J1QL4LDXHpwFMgHSzobLfHDf3+W7O6mp0BxbSD15wUjrME11LwTKWa8M+rnzAYohTb75P//",
	"HzmWy8dGILb98t//+3n/V2x88+WrHM3Ev/lG/M///leYNvnxgQFmqep6c8Jr0v/e1IKvB6LnsEF4qPHo",
	"D8XuTtbtoJGnQOYmX1YeevDRY2r7ch2YjxzB01rHc+xc2uO+uq5zZ323FRsCTZTNr5j/GxIwOMucgRpa",
	"3yP3zNzXPw04U4Phl0OS94Piwtcwbd6UicI1DbVnPM36g0gllF2ZUQ2m5Ad+hoLwMje+m3di/CmkT30Y",
	"Pvz97N26FnMSaN6y11QOXmBzhQ+64Pv/5NJdgwePhTj98n0Sw/5Z8oEBAant4xDK1yNaF83txG0FJ33f",
	"gDAQ7ax06J7dXRKiCr9z4IeLwxCCOaTHkHWESKjolRKGC5VrewSdQNLfqS/OUIJ7MHu3OV3aJq1m5u4A",
	"108SoXIseBHG5aTlfuBy0jrV6sDBSIRFdh0PQtdpmBq3bN/cuXte/fbOvRnf2DkI7tt3HP6OqC8/3QqA",
	"/AKy7orefy5JIxKww1wTbM5cc96KS+TGaSb+i3p9514wwJug/GVjZhDodOb6FsILYVbgBFGRHgS8WlLm",
	"Hbzg3QrEvgMVWO8yUSmYvhGipGDq9mjEmrBJL+0Dk/foypsilASW4VYxwz1/5CWRUTB926Jy8ybFnF++",
	"GzRvRXuZZXBxKPtKrJxIyA4FM+O7H37iFD3T3seBNvmLX1hpYuadcPTuO2UCfFzZexHidl8PxZ3XMusY",
	"BIFILKa2yaDB7XTGLWF1VCckIcIUcvdfzAUcDUF8QnjxlmKhMktEVvnpEhdgJ8LdgJ458drfU86z3bUT",
	"cxBybg0iUT68CIaic2+eUAFYmZx7i1Bg0zNb5o3Twl4/qAogjuLlYb1RRh3otBKklbMnUm5jsUt5l4j1",
	"H9XPE6g6NqKbDhvoupI8uhXs8hda72fvjwqRDYkXmFJ41+sdAR5V6enm6rgWsOAGzwM/9mz9oo52bh3j",
	"p2XiU+D9XV1E5PNX73DhHXN6bbn3aOKPROO3cIZmJNETU0pVLymWOadu6hPZ9drmXacRwJSzrj0BqqjS",
	"cYjrRQJdf8HeXO5xotsMzjbXCJIbScoTCdG/yJ772duukjccnaIYhZh9g2/vBWvQ0s2N8FkRlYBKidtE",
	"FEynNpwKxOpgA20+hwgS7vtD8JV7a4m+YA0RC1B1xqwC3d9bgewPkdyoMH9VAeoCYiESENUh78d5DC2m",
	"CaFNBEjlm/iN7JWjAgtFPkeSN/JNUgSGZpykPt2soK7HuN/nXkoeU8/XrVYNS4cCEnxpu6JttrhpWHl6",
	"m4cVqFcNvq/ytsAUenGVjTiiPehvvWulFRWdX331UYHT3F3jMn7XWwXSAdT1B7arZkgt7j4ljgMhIcun",
	"xMFu3Kdzt8J/44T9CVjo0zL+KbRXYQXyS9mlfOFRAoSYKuL28i7kz6ui3OoLX3maVx7Pm2TxhG6JCxDD",
	"pDBI29T0uri94N7zGVy4be8PGgHulOXuGMSr0zoCbd5C/Xhe1d8FRqDqe7BFIyk5/vY739tb9ls0kr5k",
	"bT+oi7NfS3BHNVw//OfLty9+shGjrDPl6zpTBG7dDmNA34V9bp7oUV27xO8x2FUZuBTzghHxhZltOEWE",
	"wt0RVFhdAvfydrLYIRJwO068YHesCI1yMWsSghRmFbrtKIS3tIIShoKsfUoOBogtlGaZUU68nR6XWJwm",
	"0uYBSN9DsOfvwvyJJJySkz/0O8et6H8TPnmj7CKMSw4v6W8GrtoHNtxH990mTy/YX8Ln8lGgqs8npW3T",
	"oTBEj4MXzBR3DOJ9CrfkyweXTFvapYS739iNM8BG4kdqLzigkb22DhIT5GIECXaRYDueIAxjUxvwmjYh",
	"7Pk8XNrvTkdF0ZC/anfXblgAJFCYlKderssLBsIHdXMAec0XP9ZmwMbwILEduDVavL27W70lmRO304wL",
	"4jc1Vng9jQAHQyHvY/PJK2t0uzWd12IBOnifWeCf4UOz7Tk2GuHdPk/x5y5vkp9GYLg6qBn0DCHex2h3",
	"gi2qJvzaoyfOLHq8eo9pNVuEq4L4fjLJKYRzbr0ztc0FHbQvvHD3qIbuW9CJZWv8dkRsib9lAaeu6vYD",
	"Yhe33l+RpG8EDf9Y2gq59udDgf6zCvTT18CZdPHbh0b9aRr1lMarQHpYCHahCmsGcPndCu2DS3++0gQ2",
	"MCDlDuCJM879kE9B3n3yHvDjLMs5rX0PywxFIrPvlO1AfTqX0VpAl4YD1xuCGID595oBghM5ct/CKfeM",
	"CvOrrt1p5P6eP/c+lQ8i/pVUzfsjZVEv4OEGS8N6mPwOUbQzDPURYPvFJOrlZH2yGfdbhpTXpFuqiK46",
	"rqXgD8jxTiIWwlMvW0AYHL4G1dQf8PO3vTGxl7ewQrr+gpkzrmn7gNy+6EI0PHOPIcWciHiMciNJ+V0i",
	"xAsWqcfctnIIDLF/qMmblPD9Mq7lGdz7Sy3IFY6/22xo5/F7u/aY7bstJgH3d/GdWNuHxfQ7W0zXBSx2",
	"NyZcEms4SWdX2kzCVa+I7vynjKX4heT6r6XWlJz7oR85ujD3X2F+CZH16Sv/F2nfdkmv8CQX8AoDNy+W",
	"cwIW+W9MqJ/ghyKf8TKOqIiVRC4x//nYoN2/y7z999Fz6od+5OgS019awn9YUd9hRXkev0QQ3jVs9CqX",
	"TV0P8/cvtpTO8+ufrIH+9fZS9M1XXbVyRVQqQJzfE406ps53habeMLMuU0p/RjDqT9ZQl1tc78vxCesI",
	"d3ilzW+V6POC/ewK9JCkHnEMw2+hYeKAV4BvTMeWzBUOZFPy058X3FxQcMNh0I/zvFFxAY5IF/Spv70q",
	"91S4NANY08Xq2Cps+ILdAykfvAA9ijAIVLyRtXQQaf+LXJfAdFrE/YjcJvMPyWr6s83nvztAIroAXkLp",
	"7wuWhFH6ler88Nqe7wicHE71EUH5gyMoB/r809d9Q/qz0RQRE3kfy1wWTzlgmqd9o/xLzNjqkVXwEWf5",
	"iLN8mKK/vin607z7vR7kYuUCL7/HHeF32gkO/T6J9zcZDG+kpYTR0z6w8SE9/8QYwOm2977KOu9eAJ/0",
	"9fJUbqQnd4aoBIikOrYNMeVamUevX7Abvn7Ydbfx3o2KxEz3yhAmlAJZNMGS3Bd8eJx+0s3ldXvevn7c",
	"aby3z3f5tt5yPiLM/1KHk7jH8B6r7BqG+FOv/iJvkOElDmiADt91Xv/k3UpxSo8kLiboIJ195Od/+LV/",
	"o47iDi3730X+LPHuSeH8GJa76bfBNY9BhRJ68aiC+E5P93VAQFIBUYHo/7nrpMBb1THDWXMdal0XOfki",
	"S1/VHWYzu1rUFime7o/kvZ61Jw2ePMhE3sPNV6CfqWWLHvLKB+d/WKdX6ORThSaMs3x3YL3bRjvDDfKH",
	"bvug8H9RXsNOJV4c8zjLZBeENsKZ7F0pDW9aoiERDfed0LSGmw9e/eDVv80OPXVzWlhomo8VsVQRCTmq",
	"zoG2gQjhBaoT0+YXxtq+agId4cUuGGLwe2fBPqn1bImC79tuRwReeuQGYr47ENLmYHiPYuUL+wiB/AFF",
	"R26ID5y+m+mgjoE35Qj2Egq5s+lcaouuh75yNXl3Dpb+rjY9waupPkj+Xx71O7yHbZ9dKbry+ULZ0XcF",
	"/cKI8kqLK+yyzO/KPQmf8IPSf1Hr5UAkf/oaxN8bMbU2NMwlp/dwWl+aC3hE6+8Nah1Qe+dgoRcljXQO",
	"lmnzDYjE58DNaWLtHwegf0L6yJXmxk9z4g9Z8SpfPuSq3at9+ks47m/VN1cbVR+a5jfWNJ9sk4IzhZ2/",
	"KZ+GWoptvtUQRv2LvKEs32EYHjKu+PgP8GE+zLt/gumikXUMmzGFC13eqO9yLjzVgj4sWjWBGiM89xT0",
	"Eld7N+5q/5o3R3wXRfJvfpDgv9yX5p1cuZXuHdkTNylXItDXeOV98nJPfdceWBBo/wCnmU3zkc7yR6ez",
	"cDH26at35e5FqSxgzxYaIj7O4IcD3kUT+5ZEcMMPEXztjd/ri3OG6Xn3CF/iebPBQXd7vzINkVPXDXz4",
	"339a+UaI1fHTLHmP+67ytMPb513gXh8z0d+gfeQ/XPv8yprh1A1HZ++zEfcxBRMR+S3Ypw30p939RIGV",
	"CDEcmAgQyXIvDw67kdzrW2kBmyLV0YHNM/X50g7ujQL7K/HpxuI3LnIgiU77Tw+F0s0LHpoO7ycjPrJx",
	"L5YX19i8RETWpYSwZNpuZ5sZWPLqnKYFcbUoFUyMobqvtdrsoreih4WkObwUii1Egmt1BvAUhvonojKn",
	"z3Hlv2rqHc0t/TP4KTEpci6PL/jXkA1Vyu9P8soc+PWkXAiqQNf5k1778fJElhk19APavJAVQt78dkCs",
	"89UixIWsdZoNaQUVaQE33Cb37kV6u3kilvjdZUz6W46iI5XNsW+NuoQ2I47aoHvUr+gF7xoWQTvK0+rh",
	"GjCS3Bc1mbYUkrZLzpJBjW3xPdhnsPnnxM8Bonhv8hCam1C4Lz+QZsi95DoIJQ99UQlIGgK6OZUY54vL",
	"NThiXvAUUn8ZQ+B6xeguqQWRPUP6iXzf6cqLgS0REB2o3DkCvO91yA30Yze8G8r41VvMYJ7yAj6H+ptc",
	"8c+pps35LLSUL9wH7UDs3grGbZG/do26tOBeD3e066AV6o16RPbI0fMOvc/xekrlvyVm3KW6ch1qIdV/",
	"vXb15piaxI15F+imI2kbDtyAVtrTHX+bmsHjOG+2YwX1ggMaau8+vASvHRy7yoiryhupOvF69u+0hMju",
	"36tHoamCmkY6UDQ8sR/ohHeD2nVOkiSmJ9kSLEDIyrQ178NCFzICZ+/sb4rjF1HvL9Mg0moGbUZ1Yl1c",
	"riq2uWL8ivBhnQJv4a+bK2llOrrGloIMywYqe6gHpOILFl6hQ01DqBfTMNg2dYShW7nsXhRATVNHeBqV",
	"ZuYKLjnMRZkDNukLtiF7U9xLCPh9g3BtmQTyKD2HEdB3bJF/qgpgYpOKSmM3dENthyHgBe9vIbywIYfH",
	"Q11OlO/gIY6/7zKb3Rn+reng/6jmOn2rrmc0BC/U9bchBIrp0LCkg7NGyDvmO2k99LzVv9cbYy//fJxf",
	"670gTf3kmadn9cLuWk1vsULIe++exE03WCHsJW+4aubA89BMyGWTr5fmRhI671CyH5mEN5JUpRLChEKg",
	"SZ4VIW5z2d+Q6nMzAo0kENkZS97NLL63QtTbC6YBheHJyZC9MqnpKT9XTeADJRROikhTCx5urrQQ/Daa",
	"p3S8BhjHm7n5J4TFt2//LwAA//9lym70qBMBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
