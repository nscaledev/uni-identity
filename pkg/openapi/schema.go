// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
