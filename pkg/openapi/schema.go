// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"G6EuGgEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
