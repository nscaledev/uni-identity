// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//eFq7vKLLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
