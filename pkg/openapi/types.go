// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"encoding/json"
	"fmt"

	"github.com/oapi-codegen/runtime"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

const (
	Oauth2AuthenticationScopes = "oauth2Authentication.Scopes"
)

// Defines values for AuthMethod.
const (
	ClientSecretBasic AuthMethod = "client_secret_basic"
	ClientSecretPost  AuthMethod = "client_secret_post"
)

// Defines values for Claim.
const (
	ClaimAud           Claim = "aud"
	ClaimEmail         Claim = "email"
	ClaimEmailVerified Claim = "email_verified"
	ClaimExp           Claim = "exp"
	ClaimFamilyName    Claim = "family_name"
	ClaimGivenName     Claim = "given_name"
	ClaimIat           Claim = "iat"
	ClaimIss           Claim = "iss"
	ClaimLocale        Claim = "locale"
	ClaimName          Claim = "name"
	ClaimPicture       Claim = "picture"
	ClaimSub           Claim = "sub"
)

// Defines values for CodeChallengeMethod.
const (
	Plain CodeChallengeMethod = "plain"
	S256  CodeChallengeMethod = "S256"
)

// Defines values for GrantType.
const (
	AuthorizationCode GrantType = "authorization_code"
	RefreshToken      GrantType = "refresh_token"
)

// Defines values for Oauth2ErrorError.
const (
	AccessDenied            Oauth2ErrorError = "access_denied"
	Conflict                Oauth2ErrorError = "conflict"
	Forbidden               Oauth2ErrorError = "forbidden"
	InvalidClient           Oauth2ErrorError = "invalid_client"
	InvalidGrant            Oauth2ErrorError = "invalid_grant"
	InvalidRequest          Oauth2ErrorError = "invalid_request"
	InvalidScope            Oauth2ErrorError = "invalid_scope"
	MethodNotAllowed        Oauth2ErrorError = "method_not_allowed"
	NotFound                Oauth2ErrorError = "not_found"
	ServerError             Oauth2ErrorError = "server_error"
	TemporarilyUnavailable  Oauth2ErrorError = "temporarily_unavailable"
	UnauthorizedClient      Oauth2ErrorError = "unauthorized_client"
	UnsupportedGrantType    Oauth2ErrorError = "unsupported_grant_type"
	UnsupportedMediaType    Oauth2ErrorError = "unsupported_media_type"
	UnsupportedResponseType Oauth2ErrorError = "unsupported_response_type"
)

// Defines values for Oauth2ProviderType.
const (
	Google    Oauth2ProviderType = "google"
	Microsoft Oauth2ProviderType = "microsoft"
)

// Defines values for OrganizationType.
const (
	Adhoc  OrganizationType = "adhoc"
	Domain OrganizationType = "domain"
)

// Defines values for ProviderScope.
const (
	Global       ProviderScope = "global"
	Organization ProviderScope = "organization"
)

// Defines values for ResponseType.
const (
	ResponseTypeCode             ResponseType = "code"
	ResponseTypeCodeIdToken      ResponseType = "code id_token"
	ResponseTypeCodeToken        ResponseType = "code token"
	ResponseTypeCodeTokenIdToken ResponseType = "code token id_token"
	ResponseTypeIdToken          ResponseType = "id_token"
	ResponseTypeNone             ResponseType = "none"
	ResponseTypeToken            ResponseType = "token"
	ResponseTypeTokenIdToken     ResponseType = "token id_token"
)

// Defines values for Scope.
const (
	ScopeEmail   Scope = "email"
	ScopeOpenid  Scope = "openid"
	ScopeProfile Scope = "profile"
)

// Defines values for SigningAlgorithm.
const (
	ES512 SigningAlgorithm = "ES512"
)

// Acl A list of access control scopes and permissions.
type Acl struct {
	// IsSuperAdmin Indicates the user can do all the things.
	IsSuperAdmin *bool `json:"isSuperAdmin,omitempty"`

	// Scopes A list of access control scopes.
	Scopes *AclScopes `json:"scopes,omitempty"`
}

// AclPermissions A list of access control permissions.
type AclPermissions = []string

// AclScope An access control scope.
type AclScope struct {
	// Name The scope name
	Name string `json:"name"`

	// Permissions A list of access control permissions.
	Permissions AclPermissions `json:"permissions"`
}

// AclScopes A list of access control scopes.
type AclScopes = []AclScope

// AuthMethod Supported authentication methods.
type AuthMethod string

// AvailableGroup An IdP group
type AvailableGroup struct {
	// DisplayName A human readable group name.
	DisplayName *string `json:"displayName,omitempty"`

	// Name The canonical group name.
	Name string `json:"name"`
}

// AvailableGroups A list of IdP groups.
type AvailableGroups = []AvailableGroup

// Claim Supported claims.
type Claim string

// CodeChallengeMethod Supported code challenge methods.
type CodeChallengeMethod string

// GrantType Supported grant type.
type GrantType string

// GroupIDs A list of group IDs.
type GroupIDs = []string

// GroupRead A group when read.
type GroupRead struct {
	Metadata externalRef0.OrganizationScopedResourceReadMetadata `json:"metadata"`

	// Spec A group.
	Spec GroupSpec `json:"spec"`
}

// GroupSpec A group.
type GroupSpec struct {
	// ProviderGroups A list of provider groups.
	ProviderGroups *ProviderGroupList `json:"providerGroups,omitempty"`

	// Roles A list of roles.
	Roles RoleList `json:"roles"`

	// Users A list of users.
	Users *UserList `json:"users,omitempty"`
}

// GroupWrite A group when created or updated.
type GroupWrite struct {
	// Metadata Resource metadata valid for all API resource reads and writes.
	Metadata externalRef0.ResourceWriteMetadata `json:"metadata"`

	// Spec A group.
	Spec GroupSpec `json:"spec"`
}

// Groups A list of groups.
type Groups = []GroupRead

// JsonWebKey JSON web key. See the relevant JWKS documentation for further details.
type JsonWebKey = map[string]interface{}

// JsonWebKeySet JSON web key set. This data type is defined by an external 3rd party standards
// committee. Consult the relevant documentation for further details.
type JsonWebKeySet struct {
	Keys *[]JsonWebKey `json:"keys,omitempty"`
}

// LoginRequestOptions Login request options.
type LoginRequestOptions struct {
	// Email The user's email address.
	Email *string `json:"email"`

	// Provider The explcit provider type.
	Provider *string `json:"provider"`

	// State The state string supplied by the authorization endpoint.
	State string `json:"state"`
}

// Oauth2Error Generic error message.
type Oauth2Error struct {
	// Error A terse error string expanding on the HTTP error code. Errors are based on the OAuth2 specification, but are expanded with proprietary status codes for APIs other than those specified by OAuth2.
	Error Oauth2ErrorError `json:"error"`

	// ErrorDescription Verbose message describing the error.
	ErrorDescription string `json:"error_description"`
}

// Oauth2ErrorError A terse error string expanding on the HTTP error code. Errors are based on the OAuth2 specification, but are expanded with proprietary status codes for APIs other than those specified by OAuth2.
type Oauth2ErrorError string

// Oauth2ProviderRead An OAuth2 provider when read.
type Oauth2ProviderRead struct {
	Metadata externalRef0.OrganizationScopedResourceReadMetadata `json:"metadata"`

	// Spec An oauth2 provider.
	Spec Oauth2ProviderSpec `json:"spec"`
}

// Oauth2ProviderSpec An oauth2 provider.
type Oauth2ProviderSpec struct {
	// ClientID The client identification, only shown for super admin or organization owned providers
	// that you are an admin for.
	ClientID string `json:"clientID"`

	// ClientSecret The client secret, only shown for super admin or organization owned providers
	// that you are an admin for.
	ClientSecret *string `json:"clientSecret,omitempty"`

	// Issuer The OIDC issuer, typically where to perform auto discovery relative to.
	Issuer string `json:"issuer"`

	// Type The type of identity provider.
	Type *Oauth2ProviderType `json:"type,omitempty"`
}

// Oauth2ProviderType The type of identity provider.
type Oauth2ProviderType string

// Oauth2ProviderWrite An OAuth2 provider when created or updated.
type Oauth2ProviderWrite struct {
	// Metadata Resource metadata valid for all API resource reads and writes.
	Metadata externalRef0.ResourceWriteMetadata `json:"metadata"`

	// Spec An oauth2 provider.
	Spec Oauth2ProviderSpec `json:"spec"`
}

// Oauth2Providers A list of oauth2 providers.
type Oauth2Providers = []Oauth2ProviderRead

// OpenidConfiguration OpenID configuration.
type OpenidConfiguration struct {
	// AuthorizationEndpoint The oauth2 endpoint that initiates authentication.
	AuthorizationEndpoint string `json:"authorization_endpoint"`

	// ClaimsSupported A list of supported claims
	ClaimsSupported []Claim `json:"claims_supported"`

	// CodeChallengeMethodsSupported A list of code challenge methods supported.
	CodeChallengeMethodsSupported []CodeChallengeMethod `json:"code_challenge_methods_supported"`

	// GrantTypesSupported A list of supported grants for the token endpoint.
	GrantTypesSupported []GrantType `json:"grant_types_supported"`

	// IdTokenSigningAlgValuesSupported A list of signing algorithms supported for ID tokens.
	IdTokenSigningAlgValuesSupported []SigningAlgorithm `json:"id_token_signing_alg_values_supported"`

	// Issuer The OpenID Issuer (iss field).
	Issuer string `json:"issuer"`

	// JwksUri The oauth2 endpoint that exposes public signing keys for token validation.
	JwksUri string `json:"jwks_uri"`

	// ResponseTypesSupported A list of supported response types that can be requested for the authorization endpoint.
	ResponseTypesSupported []ResponseType `json:"response_types_supported"`

	// ScopesSupported A list of supported oauth2 scopes.
	ScopesSupported []Scope `json:"scopes_supported"`

	// TokenEndpoint The oauth2 endpoint that is used to exchange an authentication code for tokens.
	TokenEndpoint string `json:"token_endpoint"`

	// TokenEndpointAuthMethodsSupported A list of supported authentication methods for the token endpoint.
	TokenEndpointAuthMethodsSupported []AuthMethod `json:"token_endpoint_auth_methods_supported"`

	// UserinfoEndpoint The oidc endpoint used to get information about an access token's user.
	UserinfoEndpoint string `json:"userinfo_endpoint"`
}

// OrganizationRead An organization when read.
type OrganizationRead struct {
	// Metadata Resource metadata valid for all reads.
	Metadata externalRef0.ResourceReadMetadata `json:"metadata"`

	// Spec An organization.
	Spec OrganizationSpec `json:"spec"`
}

// OrganizationSpec An organization.
type OrganizationSpec struct {
	// Domain The email domain of the organization.
	Domain *string `json:"domain,omitempty"`

	// GoogleCustomerID When set this identifies the customer ID for the google managed organization.
	// This enables the access to, and use of, Google groups as a source of truth
	// for RBAC.
	GoogleCustomerID *string `json:"googleCustomerID,omitempty"`

	// OrganizationType Describes the authntication menthod of the organization.  Adhoc authentication
	// means that users are exclusively added via explicit group membership  And must
	// use a 'sign-in via' option.  Domain authentication means that users may login
	// via their email address, must in the case of custom identity providers, that
	// maps from domain to an identity provider.  This enables authentication options
	// such as implicit group mappings for RBAC.
	OrganizationType OrganizationType `json:"organizationType"`

	// ProviderID The ID of the provider to use, the scope is determined by useCustomProvider.
	// If false, this refers to a built in provider, if true, then to an organization
	// specific one.
	ProviderID *string `json:"providerID,omitempty"`

	// ProviderScope Describes how to lookup the provider, when global, use a built in generic provider
	// e.g. Google/Microsoft, when organization, us an organization scoped provider.
	ProviderScope *ProviderScope `json:"providerScope,omitempty"`
}

// OrganizationType Describes the authntication menthod of the organization.  Adhoc authentication
// means that users are exclusively added via explicit group membership  And must
// use a 'sign-in via' option.  Domain authentication means that users may login
// via their email address, must in the case of custom identity providers, that
// maps from domain to an identity provider.  This enables authentication options
// such as implicit group mappings for RBAC.
type OrganizationType string

// OrganizationWrite An organization when created or updated.
type OrganizationWrite struct {
	// Metadata Resource metadata valid for all API resource reads and writes.
	Metadata externalRef0.ResourceWriteMetadata `json:"metadata"`

	// Spec An organization.
	Spec OrganizationSpec `json:"spec"`
}

// Organizations A list of organizations.
type Organizations = []OrganizationRead

// ProjectRead A project when read.
type ProjectRead struct {
	Metadata externalRef0.OrganizationScopedResourceReadMetadata `json:"metadata"`

	// Spec A project.
	Spec ProjectSpec `json:"spec"`
}

// ProjectSpec A project.
type ProjectSpec struct {
	// GroupIDs A list of group IDs.
	GroupIDs *GroupIDs `json:"groupIDs,omitempty"`
}

// ProjectWrite A project when created or updated.
type ProjectWrite struct {
	// Metadata Resource metadata valid for all API resource reads and writes.
	Metadata externalRef0.ResourceWriteMetadata `json:"metadata"`

	// Spec A project.
	Spec ProjectSpec `json:"spec"`
}

// Projects A list of projects.
type Projects = []ProjectRead

// ProviderGroupList A list of provider groups.
type ProviderGroupList = []string

// ProviderScope Describes how to lookup the provider, when global, use a built in generic provider
// e.g. Google/Microsoft, when organization, us an organization scoped provider.
type ProviderScope string

// ResponseType Supported response types.
type ResponseType string

// RoleList A list of roles.
type RoleList = []string

// Scope Supported scopes.
type Scope string

// SigningAlgorithm Supported signing algorithms.
type SigningAlgorithm string

// Token Oauth2 token result.
type Token struct {
	// AccessToken The opaque access token.
	AccessToken string `json:"access_token"`

	// ExpiresIn The time in seconds the token will last for.
	ExpiresIn int `json:"expires_in"`

	// IdToken An OIDC ID token.
	IdToken *string `json:"id_token,omitempty"`

	// RefreshToken The opaque refresh token.
	RefreshToken string `json:"refresh_token"`

	// TokenType How the access token is to be presented to the resource server.
	TokenType string `json:"token_type"`
}

// TokenRequestOptions oauth2 token endpoint.
type TokenRequestOptions struct {
	// ClientId Client ID. Required with the "code" grant type.
	ClientId *string `json:"client_id"`

	// Code Authorization code. Required with the "code" grant type.
	Code *string `json:"code"`

	// CodeVerifier Client code verifier. Required with the "code" grant type.
	CodeVerifier *string `json:"code_verifier"`

	// GrantType Supported grant type.  Must be either "code" or "password".
	GrantType string `json:"grant_type"`

	// Password Resource owner password. Required with the "password" grant type.
	Password *string `json:"password"`

	// RedirectUri Client redirect URI. Required with the "code" grant type.
	RedirectUri *string `json:"redirect_uri"`

	// RefreshToken A refresh token for the refresh_token grant type.
	RefreshToken *string `json:"refresh_token"`

	// Username Resource owner username. Required with the "password" grant type.
	Username *string `json:"username"`
	union    json.RawMessage
}

// TokenRequestOptions0 defines model for .
type TokenRequestOptions0 struct {
	GrantType *interface{} `json:"grant_type,omitempty"`
}

// TokenRequestOptions1 defines model for .
type TokenRequestOptions1 struct {
	GrantType *interface{} `json:"grant_type,omitempty"`
}

// UserList A list of users.
type UserList = []string

// GroupidParameter defines model for groupidParameter.
type GroupidParameter = string

// Oauth2ProvderIDParameter defines model for oauth2ProvderIDParameter.
type Oauth2ProvderIDParameter = string

// OrganizationIDParameter defines model for organizationIDParameter.
type OrganizationIDParameter = string

// ProjectIDParameter defines model for projectIDParameter.
type ProjectIDParameter = string

// AclResponse A list of access control scopes and permissions.
type AclResponse = Acl

// AvailableGroupsResponse A list of IdP groups.
type AvailableGroupsResponse = AvailableGroups

// BadRequestResponse Generic error message.
type BadRequestResponse = Oauth2Error

// ConflictResponse Generic error message.
type ConflictResponse = Oauth2Error

// ForbiddenResponse Generic error message.
type ForbiddenResponse = Oauth2Error

// GroupResponse A group when read.
type GroupResponse = GroupRead

// GroupsResponse A list of groups.
type GroupsResponse = Groups

// InternalServerErrorResponse Generic error message.
type InternalServerErrorResponse = Oauth2Error

// JwksResponse JSON web key set. This data type is defined by an external 3rd party standards
// committee. Consult the relevant documentation for further details.
type JwksResponse = JsonWebKeySet

// NotFoundResponse Generic error message.
type NotFoundResponse = Oauth2Error

// Oauth2ProvidersResponse A list of oauth2 providers.
type Oauth2ProvidersResponse = Oauth2Providers

// OpenidConfigurationResponse OpenID configuration.
type OpenidConfigurationResponse = OpenidConfiguration

// OrganizationResponse An organization when read.
type OrganizationResponse = OrganizationRead

// OrganizationsResponse A list of organizations.
type OrganizationsResponse = Organizations

// ProjectResponse A project when read.
type ProjectResponse = ProjectRead

// ProjectsResponse A list of projects.
type ProjectsResponse = Projects

// RolesResponse A list of roles.
type RolesResponse = RoleList

// SystemOauth2ProvidersResponse A list of oauth2 providers.
type SystemOauth2ProvidersResponse = Oauth2Providers

// TokenResponse Oauth2 token result.
type TokenResponse = Token

// UnauthorizedResponse Generic error message.
type UnauthorizedResponse = Oauth2Error

// UserinfoResponse defines model for userinfoResponse.
type UserinfoResponse interface{}

// CreateGroupRequest A group when created or updated.
type CreateGroupRequest = GroupWrite

// CreateOrganizationRequest An organization when created or updated.
type CreateOrganizationRequest = OrganizationWrite

// CreateProjectRequest A project when created or updated.
type CreateProjectRequest = ProjectWrite

// Oauth2ProviderRequest An OAuth2 provider when created or updated.
type Oauth2ProviderRequest = Oauth2ProviderWrite

// UpdateGroupRequest A group when created or updated.
type UpdateGroupRequest = GroupWrite

// UpdateOrganizationRequest An organization when created or updated.
type UpdateOrganizationRequest = OrganizationWrite

// UpdateProjectRequest A project when created or updated.
type UpdateProjectRequest = ProjectWrite

// PostApiV1OrganizationsJSONRequestBody defines body for PostApiV1Organizations for application/json ContentType.
type PostApiV1OrganizationsJSONRequestBody = OrganizationWrite

// PutApiV1OrganizationsOrganizationIDJSONRequestBody defines body for PutApiV1OrganizationsOrganizationID for application/json ContentType.
type PutApiV1OrganizationsOrganizationIDJSONRequestBody = OrganizationWrite

// PostApiV1OrganizationsOrganizationIDGroupsJSONRequestBody defines body for PostApiV1OrganizationsOrganizationIDGroups for application/json ContentType.
type PostApiV1OrganizationsOrganizationIDGroupsJSONRequestBody = GroupWrite

// PutApiV1OrganizationsOrganizationIDGroupsGroupidJSONRequestBody defines body for PutApiV1OrganizationsOrganizationIDGroupsGroupid for application/json ContentType.
type PutApiV1OrganizationsOrganizationIDGroupsGroupidJSONRequestBody = GroupWrite

// PostApiV1OrganizationsOrganizationIDOauth2providersJSONRequestBody defines body for PostApiV1OrganizationsOrganizationIDOauth2providers for application/json ContentType.
type PostApiV1OrganizationsOrganizationIDOauth2providersJSONRequestBody = Oauth2ProviderWrite

// PutApiV1OrganizationsOrganizationIDOauth2providersProviderIDJSONRequestBody defines body for PutApiV1OrganizationsOrganizationIDOauth2providersProviderID for application/json ContentType.
type PutApiV1OrganizationsOrganizationIDOauth2providersProviderIDJSONRequestBody = Oauth2ProviderWrite

// PostApiV1OrganizationsOrganizationIDProjectsJSONRequestBody defines body for PostApiV1OrganizationsOrganizationIDProjects for application/json ContentType.
type PostApiV1OrganizationsOrganizationIDProjectsJSONRequestBody = ProjectWrite

// PutApiV1OrganizationsOrganizationIDProjectsProjectIDJSONRequestBody defines body for PutApiV1OrganizationsOrganizationIDProjectsProjectID for application/json ContentType.
type PutApiV1OrganizationsOrganizationIDProjectsProjectIDJSONRequestBody = ProjectWrite

// PostOauth2V2LoginFormdataRequestBody defines body for PostOauth2V2Login for application/x-www-form-urlencoded ContentType.
type PostOauth2V2LoginFormdataRequestBody = LoginRequestOptions

// PostOauth2V2TokenFormdataRequestBody defines body for PostOauth2V2Token for application/x-www-form-urlencoded ContentType.
type PostOauth2V2TokenFormdataRequestBody = TokenRequestOptions

// AsTokenRequestOptions0 returns the union data inside the TokenRequestOptions as a TokenRequestOptions0
func (t TokenRequestOptions) AsTokenRequestOptions0() (TokenRequestOptions0, error) {
	var body TokenRequestOptions0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTokenRequestOptions0 overwrites any union data inside the TokenRequestOptions as the provided TokenRequestOptions0
func (t *TokenRequestOptions) FromTokenRequestOptions0(v TokenRequestOptions0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTokenRequestOptions0 performs a merge with any union data inside the TokenRequestOptions, using the provided TokenRequestOptions0
func (t *TokenRequestOptions) MergeTokenRequestOptions0(v TokenRequestOptions0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsTokenRequestOptions1 returns the union data inside the TokenRequestOptions as a TokenRequestOptions1
func (t TokenRequestOptions) AsTokenRequestOptions1() (TokenRequestOptions1, error) {
	var body TokenRequestOptions1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTokenRequestOptions1 overwrites any union data inside the TokenRequestOptions as the provided TokenRequestOptions1
func (t *TokenRequestOptions) FromTokenRequestOptions1(v TokenRequestOptions1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTokenRequestOptions1 performs a merge with any union data inside the TokenRequestOptions, using the provided TokenRequestOptions1
func (t *TokenRequestOptions) MergeTokenRequestOptions1(v TokenRequestOptions1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t TokenRequestOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.ClientId != nil {
		object["client_id"], err = json.Marshal(t.ClientId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'client_id': %w", err)
		}
	}

	if t.Code != nil {
		object["code"], err = json.Marshal(t.Code)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'code': %w", err)
		}
	}

	if t.CodeVerifier != nil {
		object["code_verifier"], err = json.Marshal(t.CodeVerifier)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'code_verifier': %w", err)
		}
	}

	object["grant_type"], err = json.Marshal(t.GrantType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'grant_type': %w", err)
	}

	if t.Password != nil {
		object["password"], err = json.Marshal(t.Password)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'password': %w", err)
		}
	}

	if t.RedirectUri != nil {
		object["redirect_uri"], err = json.Marshal(t.RedirectUri)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'redirect_uri': %w", err)
		}
	}

	if t.RefreshToken != nil {
		object["refresh_token"], err = json.Marshal(t.RefreshToken)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'refresh_token': %w", err)
		}
	}

	if t.Username != nil {
		object["username"], err = json.Marshal(t.Username)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'username': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *TokenRequestOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["client_id"]; found {
		err = json.Unmarshal(raw, &t.ClientId)
		if err != nil {
			return fmt.Errorf("error reading 'client_id': %w", err)
		}
	}

	if raw, found := object["code"]; found {
		err = json.Unmarshal(raw, &t.Code)
		if err != nil {
			return fmt.Errorf("error reading 'code': %w", err)
		}
	}

	if raw, found := object["code_verifier"]; found {
		err = json.Unmarshal(raw, &t.CodeVerifier)
		if err != nil {
			return fmt.Errorf("error reading 'code_verifier': %w", err)
		}
	}

	if raw, found := object["grant_type"]; found {
		err = json.Unmarshal(raw, &t.GrantType)
		if err != nil {
			return fmt.Errorf("error reading 'grant_type': %w", err)
		}
	}

	if raw, found := object["password"]; found {
		err = json.Unmarshal(raw, &t.Password)
		if err != nil {
			return fmt.Errorf("error reading 'password': %w", err)
		}
	}

	if raw, found := object["redirect_uri"]; found {
		err = json.Unmarshal(raw, &t.RedirectUri)
		if err != nil {
			return fmt.Errorf("error reading 'redirect_uri': %w", err)
		}
	}

	if raw, found := object["refresh_token"]; found {
		err = json.Unmarshal(raw, &t.RefreshToken)
		if err != nil {
			return fmt.Errorf("error reading 'refresh_token': %w", err)
		}
	}

	if raw, found := object["username"]; found {
		err = json.Unmarshal(raw, &t.Username)
		if err != nil {
			return fmt.Errorf("error reading 'username': %w", err)
		}
	}

	return err
}
