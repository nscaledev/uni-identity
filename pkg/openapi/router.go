// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"context"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /.well-known/openid-configuration)
	GetWellKnownOpenidConfiguration(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/oauth2providers)
	GetApiV1Oauth2providers(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/organizations)
	GetApiV1Organizations(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/organizations/{organizationID})
	GetApiV1OrganizationsOrganizationID(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter)

	// (PUT /api/v1/organizations/{organizationID})
	PutApiV1OrganizationsOrganizationID(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter)

	// (GET /api/v1/organizations/{organizationID}/acl)
	GetApiV1OrganizationsOrganizationIDAcl(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter)

	// (GET /api/v1/organizations/{organizationID}/available-groups)
	GetApiV1OrganizationsOrganizationIDAvailableGroups(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter)

	// (GET /api/v1/organizations/{organizationID}/groups)
	GetApiV1OrganizationsOrganizationIDGroups(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter)

	// (POST /api/v1/organizations/{organizationID}/groups)
	PostApiV1OrganizationsOrganizationIDGroups(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter)

	// (DELETE /api/v1/organizations/{organizationID}/groups/{groupid})
	DeleteApiV1OrganizationsOrganizationIDGroupsGroupid(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter, groupid GroupidParameter)

	// (GET /api/v1/organizations/{organizationID}/groups/{groupid})
	GetApiV1OrganizationsOrganizationIDGroupsGroupid(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter, groupid GroupidParameter)

	// (PUT /api/v1/organizations/{organizationID}/groups/{groupid})
	PutApiV1OrganizationsOrganizationIDGroupsGroupid(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter, groupid GroupidParameter)

	// (GET /api/v1/organizations/{organizationID}/oauth2providers)
	GetApiV1OrganizationsOrganizationIDOauth2providers(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter)

	// (POST /api/v1/organizations/{organizationID}/oauth2providers)
	PostApiV1OrganizationsOrganizationIDOauth2providers(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter)

	// (DELETE /api/v1/organizations/{organizationID}/oauth2providers/{providerID})
	DeleteApiV1OrganizationsOrganizationIDOauth2providersProviderID(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter, providerID Oauth2ProvderIDParameter)

	// (PUT /api/v1/organizations/{organizationID}/oauth2providers/{providerID})
	PutApiV1OrganizationsOrganizationIDOauth2providersProviderID(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter, providerID Oauth2ProvderIDParameter)

	// (GET /api/v1/organizations/{organizationID}/projects)
	GetApiV1OrganizationsOrganizationIDProjects(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter)

	// (POST /api/v1/organizations/{organizationID}/projects)
	PostApiV1OrganizationsOrganizationIDProjects(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter)

	// (DELETE /api/v1/organizations/{organizationID}/projects/{projectID})
	DeleteApiV1OrganizationsOrganizationIDProjectsProjectID(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter, projectID ProjectIDParameter)

	// (GET /api/v1/organizations/{organizationID}/projects/{projectID})
	GetApiV1OrganizationsOrganizationIDProjectsProjectID(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter, projectID ProjectIDParameter)

	// (PUT /api/v1/organizations/{organizationID}/projects/{projectID})
	PutApiV1OrganizationsOrganizationIDProjectsProjectID(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter, projectID ProjectIDParameter)

	// (GET /api/v1/organizations/{organizationID}/roles)
	GetApiV1OrganizationsOrganizationIDRoles(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter)

	// (GET /oauth2/v2/authorization)
	GetOauth2V2Authorization(w http.ResponseWriter, r *http.Request)

	// (GET /oauth2/v2/jwks)
	GetOauth2V2Jwks(w http.ResponseWriter, r *http.Request)

	// (POST /oauth2/v2/login)
	PostOauth2V2Login(w http.ResponseWriter, r *http.Request)

	// (POST /oauth2/v2/token)
	PostOauth2V2Token(w http.ResponseWriter, r *http.Request)

	// (GET /oauth2/v2/userinfo)
	GetOauth2V2Userinfo(w http.ResponseWriter, r *http.Request)

	// (GET /oidc/callback)
	GetOidcCallback(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /.well-known/openid-configuration)
func (_ Unimplemented) GetWellKnownOpenidConfiguration(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/oauth2providers)
func (_ Unimplemented) GetApiV1Oauth2providers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/organizations)
func (_ Unimplemented) GetApiV1Organizations(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/organizations/{organizationID})
func (_ Unimplemented) GetApiV1OrganizationsOrganizationID(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /api/v1/organizations/{organizationID})
func (_ Unimplemented) PutApiV1OrganizationsOrganizationID(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/organizations/{organizationID}/acl)
func (_ Unimplemented) GetApiV1OrganizationsOrganizationIDAcl(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/organizations/{organizationID}/available-groups)
func (_ Unimplemented) GetApiV1OrganizationsOrganizationIDAvailableGroups(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/organizations/{organizationID}/groups)
func (_ Unimplemented) GetApiV1OrganizationsOrganizationIDGroups(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /api/v1/organizations/{organizationID}/groups)
func (_ Unimplemented) PostApiV1OrganizationsOrganizationIDGroups(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /api/v1/organizations/{organizationID}/groups/{groupid})
func (_ Unimplemented) DeleteApiV1OrganizationsOrganizationIDGroupsGroupid(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter, groupid GroupidParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/organizations/{organizationID}/groups/{groupid})
func (_ Unimplemented) GetApiV1OrganizationsOrganizationIDGroupsGroupid(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter, groupid GroupidParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /api/v1/organizations/{organizationID}/groups/{groupid})
func (_ Unimplemented) PutApiV1OrganizationsOrganizationIDGroupsGroupid(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter, groupid GroupidParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/organizations/{organizationID}/oauth2providers)
func (_ Unimplemented) GetApiV1OrganizationsOrganizationIDOauth2providers(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /api/v1/organizations/{organizationID}/oauth2providers)
func (_ Unimplemented) PostApiV1OrganizationsOrganizationIDOauth2providers(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /api/v1/organizations/{organizationID}/oauth2providers/{providerID})
func (_ Unimplemented) DeleteApiV1OrganizationsOrganizationIDOauth2providersProviderID(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter, providerID Oauth2ProvderIDParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /api/v1/organizations/{organizationID}/oauth2providers/{providerID})
func (_ Unimplemented) PutApiV1OrganizationsOrganizationIDOauth2providersProviderID(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter, providerID Oauth2ProvderIDParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/organizations/{organizationID}/projects)
func (_ Unimplemented) GetApiV1OrganizationsOrganizationIDProjects(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /api/v1/organizations/{organizationID}/projects)
func (_ Unimplemented) PostApiV1OrganizationsOrganizationIDProjects(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /api/v1/organizations/{organizationID}/projects/{projectID})
func (_ Unimplemented) DeleteApiV1OrganizationsOrganizationIDProjectsProjectID(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter, projectID ProjectIDParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/organizations/{organizationID}/projects/{projectID})
func (_ Unimplemented) GetApiV1OrganizationsOrganizationIDProjectsProjectID(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter, projectID ProjectIDParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /api/v1/organizations/{organizationID}/projects/{projectID})
func (_ Unimplemented) PutApiV1OrganizationsOrganizationIDProjectsProjectID(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter, projectID ProjectIDParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/organizations/{organizationID}/roles)
func (_ Unimplemented) GetApiV1OrganizationsOrganizationIDRoles(w http.ResponseWriter, r *http.Request, organizationID OrganizationIDParameter) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /oauth2/v2/authorization)
func (_ Unimplemented) GetOauth2V2Authorization(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /oauth2/v2/jwks)
func (_ Unimplemented) GetOauth2V2Jwks(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /oauth2/v2/login)
func (_ Unimplemented) PostOauth2V2Login(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /oauth2/v2/token)
func (_ Unimplemented) PostOauth2V2Token(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /oauth2/v2/userinfo)
func (_ Unimplemented) GetOauth2V2Userinfo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /oidc/callback)
func (_ Unimplemented) GetOidcCallback(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetWellKnownOpenidConfiguration operation middleware
func (siw *ServerInterfaceWrapper) GetWellKnownOpenidConfiguration(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWellKnownOpenidConfiguration(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1Oauth2providers operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Oauth2providers(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1Oauth2providers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1Organizations operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Organizations(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1Organizations(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1OrganizationsOrganizationID operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1OrganizationsOrganizationID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "organizationID" -------------
	var organizationID OrganizationIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "organizationID", chi.URLParam(r, "organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organizationID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1OrganizationsOrganizationID(w, r, organizationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutApiV1OrganizationsOrganizationID operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1OrganizationsOrganizationID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "organizationID" -------------
	var organizationID OrganizationIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "organizationID", chi.URLParam(r, "organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organizationID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiV1OrganizationsOrganizationID(w, r, organizationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1OrganizationsOrganizationIDAcl operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1OrganizationsOrganizationIDAcl(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "organizationID" -------------
	var organizationID OrganizationIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "organizationID", chi.URLParam(r, "organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organizationID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1OrganizationsOrganizationIDAcl(w, r, organizationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1OrganizationsOrganizationIDAvailableGroups operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1OrganizationsOrganizationIDAvailableGroups(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "organizationID" -------------
	var organizationID OrganizationIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "organizationID", chi.URLParam(r, "organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organizationID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1OrganizationsOrganizationIDAvailableGroups(w, r, organizationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1OrganizationsOrganizationIDGroups operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1OrganizationsOrganizationIDGroups(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "organizationID" -------------
	var organizationID OrganizationIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "organizationID", chi.URLParam(r, "organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organizationID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1OrganizationsOrganizationIDGroups(w, r, organizationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiV1OrganizationsOrganizationIDGroups operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1OrganizationsOrganizationIDGroups(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "organizationID" -------------
	var organizationID OrganizationIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "organizationID", chi.URLParam(r, "organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organizationID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1OrganizationsOrganizationIDGroups(w, r, organizationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteApiV1OrganizationsOrganizationIDGroupsGroupid operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1OrganizationsOrganizationIDGroupsGroupid(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "organizationID" -------------
	var organizationID OrganizationIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "organizationID", chi.URLParam(r, "organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organizationID", Err: err})
		return
	}

	// ------------- Path parameter "groupid" -------------
	var groupid GroupidParameter

	err = runtime.BindStyledParameterWithOptions("simple", "groupid", chi.URLParam(r, "groupid"), &groupid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupid", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiV1OrganizationsOrganizationIDGroupsGroupid(w, r, organizationID, groupid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1OrganizationsOrganizationIDGroupsGroupid operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1OrganizationsOrganizationIDGroupsGroupid(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "organizationID" -------------
	var organizationID OrganizationIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "organizationID", chi.URLParam(r, "organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organizationID", Err: err})
		return
	}

	// ------------- Path parameter "groupid" -------------
	var groupid GroupidParameter

	err = runtime.BindStyledParameterWithOptions("simple", "groupid", chi.URLParam(r, "groupid"), &groupid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupid", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1OrganizationsOrganizationIDGroupsGroupid(w, r, organizationID, groupid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutApiV1OrganizationsOrganizationIDGroupsGroupid operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1OrganizationsOrganizationIDGroupsGroupid(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "organizationID" -------------
	var organizationID OrganizationIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "organizationID", chi.URLParam(r, "organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organizationID", Err: err})
		return
	}

	// ------------- Path parameter "groupid" -------------
	var groupid GroupidParameter

	err = runtime.BindStyledParameterWithOptions("simple", "groupid", chi.URLParam(r, "groupid"), &groupid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupid", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiV1OrganizationsOrganizationIDGroupsGroupid(w, r, organizationID, groupid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1OrganizationsOrganizationIDOauth2providers operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1OrganizationsOrganizationIDOauth2providers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "organizationID" -------------
	var organizationID OrganizationIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "organizationID", chi.URLParam(r, "organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organizationID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1OrganizationsOrganizationIDOauth2providers(w, r, organizationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiV1OrganizationsOrganizationIDOauth2providers operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1OrganizationsOrganizationIDOauth2providers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "organizationID" -------------
	var organizationID OrganizationIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "organizationID", chi.URLParam(r, "organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organizationID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1OrganizationsOrganizationIDOauth2providers(w, r, organizationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteApiV1OrganizationsOrganizationIDOauth2providersProviderID operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1OrganizationsOrganizationIDOauth2providersProviderID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "organizationID" -------------
	var organizationID OrganizationIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "organizationID", chi.URLParam(r, "organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organizationID", Err: err})
		return
	}

	// ------------- Path parameter "providerID" -------------
	var providerID Oauth2ProvderIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "providerID", chi.URLParam(r, "providerID"), &providerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiV1OrganizationsOrganizationIDOauth2providersProviderID(w, r, organizationID, providerID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutApiV1OrganizationsOrganizationIDOauth2providersProviderID operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1OrganizationsOrganizationIDOauth2providersProviderID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "organizationID" -------------
	var organizationID OrganizationIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "organizationID", chi.URLParam(r, "organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organizationID", Err: err})
		return
	}

	// ------------- Path parameter "providerID" -------------
	var providerID Oauth2ProvderIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "providerID", chi.URLParam(r, "providerID"), &providerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiV1OrganizationsOrganizationIDOauth2providersProviderID(w, r, organizationID, providerID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1OrganizationsOrganizationIDProjects operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1OrganizationsOrganizationIDProjects(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "organizationID" -------------
	var organizationID OrganizationIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "organizationID", chi.URLParam(r, "organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organizationID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1OrganizationsOrganizationIDProjects(w, r, organizationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiV1OrganizationsOrganizationIDProjects operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1OrganizationsOrganizationIDProjects(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "organizationID" -------------
	var organizationID OrganizationIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "organizationID", chi.URLParam(r, "organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organizationID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1OrganizationsOrganizationIDProjects(w, r, organizationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteApiV1OrganizationsOrganizationIDProjectsProjectID operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1OrganizationsOrganizationIDProjectsProjectID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "organizationID" -------------
	var organizationID OrganizationIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "organizationID", chi.URLParam(r, "organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organizationID", Err: err})
		return
	}

	// ------------- Path parameter "projectID" -------------
	var projectID ProjectIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "projectID", chi.URLParam(r, "projectID"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiV1OrganizationsOrganizationIDProjectsProjectID(w, r, organizationID, projectID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1OrganizationsOrganizationIDProjectsProjectID operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1OrganizationsOrganizationIDProjectsProjectID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "organizationID" -------------
	var organizationID OrganizationIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "organizationID", chi.URLParam(r, "organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organizationID", Err: err})
		return
	}

	// ------------- Path parameter "projectID" -------------
	var projectID ProjectIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "projectID", chi.URLParam(r, "projectID"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1OrganizationsOrganizationIDProjectsProjectID(w, r, organizationID, projectID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutApiV1OrganizationsOrganizationIDProjectsProjectID operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1OrganizationsOrganizationIDProjectsProjectID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "organizationID" -------------
	var organizationID OrganizationIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "organizationID", chi.URLParam(r, "organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organizationID", Err: err})
		return
	}

	// ------------- Path parameter "projectID" -------------
	var projectID ProjectIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "projectID", chi.URLParam(r, "projectID"), &projectID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "projectID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiV1OrganizationsOrganizationIDProjectsProjectID(w, r, organizationID, projectID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiV1OrganizationsOrganizationIDRoles operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1OrganizationsOrganizationIDRoles(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "organizationID" -------------
	var organizationID OrganizationIDParameter

	err = runtime.BindStyledParameterWithOptions("simple", "organizationID", chi.URLParam(r, "organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organizationID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1OrganizationsOrganizationIDRoles(w, r, organizationID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetOauth2V2Authorization operation middleware
func (siw *ServerInterfaceWrapper) GetOauth2V2Authorization(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOauth2V2Authorization(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetOauth2V2Jwks operation middleware
func (siw *ServerInterfaceWrapper) GetOauth2V2Jwks(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOauth2V2Jwks(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostOauth2V2Login operation middleware
func (siw *ServerInterfaceWrapper) PostOauth2V2Login(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostOauth2V2Login(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostOauth2V2Token operation middleware
func (siw *ServerInterfaceWrapper) PostOauth2V2Token(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostOauth2V2Token(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetOauth2V2Userinfo operation middleware
func (siw *ServerInterfaceWrapper) GetOauth2V2Userinfo(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOauth2V2Userinfo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetOidcCallback operation middleware
func (siw *ServerInterfaceWrapper) GetOidcCallback(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOidcCallback(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/.well-known/openid-configuration", wrapper.GetWellKnownOpenidConfiguration)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/oauth2providers", wrapper.GetApiV1Oauth2providers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/organizations", wrapper.GetApiV1Organizations)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/organizations/{organizationID}", wrapper.GetApiV1OrganizationsOrganizationID)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/organizations/{organizationID}", wrapper.PutApiV1OrganizationsOrganizationID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/organizations/{organizationID}/acl", wrapper.GetApiV1OrganizationsOrganizationIDAcl)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/organizations/{organizationID}/available-groups", wrapper.GetApiV1OrganizationsOrganizationIDAvailableGroups)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/organizations/{organizationID}/groups", wrapper.GetApiV1OrganizationsOrganizationIDGroups)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/organizations/{organizationID}/groups", wrapper.PostApiV1OrganizationsOrganizationIDGroups)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/organizations/{organizationID}/groups/{groupid}", wrapper.DeleteApiV1OrganizationsOrganizationIDGroupsGroupid)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/organizations/{organizationID}/groups/{groupid}", wrapper.GetApiV1OrganizationsOrganizationIDGroupsGroupid)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/organizations/{organizationID}/groups/{groupid}", wrapper.PutApiV1OrganizationsOrganizationIDGroupsGroupid)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/organizations/{organizationID}/oauth2providers", wrapper.GetApiV1OrganizationsOrganizationIDOauth2providers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/organizations/{organizationID}/oauth2providers", wrapper.PostApiV1OrganizationsOrganizationIDOauth2providers)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/organizations/{organizationID}/oauth2providers/{providerID}", wrapper.DeleteApiV1OrganizationsOrganizationIDOauth2providersProviderID)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/organizations/{organizationID}/oauth2providers/{providerID}", wrapper.PutApiV1OrganizationsOrganizationIDOauth2providersProviderID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/organizations/{organizationID}/projects", wrapper.GetApiV1OrganizationsOrganizationIDProjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/organizations/{organizationID}/projects", wrapper.PostApiV1OrganizationsOrganizationIDProjects)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/organizations/{organizationID}/projects/{projectID}", wrapper.DeleteApiV1OrganizationsOrganizationIDProjectsProjectID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/organizations/{organizationID}/projects/{projectID}", wrapper.GetApiV1OrganizationsOrganizationIDProjectsProjectID)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/organizations/{organizationID}/projects/{projectID}", wrapper.PutApiV1OrganizationsOrganizationIDProjectsProjectID)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/organizations/{organizationID}/roles", wrapper.GetApiV1OrganizationsOrganizationIDRoles)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/oauth2/v2/authorization", wrapper.GetOauth2V2Authorization)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/oauth2/v2/jwks", wrapper.GetOauth2V2Jwks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/oauth2/v2/login", wrapper.PostOauth2V2Login)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/oauth2/v2/token", wrapper.PostOauth2V2Token)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/oauth2/v2/userinfo", wrapper.GetOauth2V2Userinfo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/oidc/callback", wrapper.GetOidcCallback)
	})

	return r
}
