// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"t/HUx8f/DQAA//+ckXwWzWQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
