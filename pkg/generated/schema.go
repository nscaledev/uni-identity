// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
