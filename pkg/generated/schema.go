// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9eVPizL7wV0nlfU8999YFZBFHp+qpuoiioICyCocpqkka0pB0x+6EbWq++61eAgkE",
	"RMfzLOfMXwp0evn1b9/yXTeI4xIMscf0r991F1DgQA9S8WlCie8i8yn4kn9nQmZQ5HqIYP2rXtB8jF59",
	"qImhWvkmpSd0xH9xgWfpCR0DB+pfg5n0hE7hq48oNPWvHvVhQmeGBR3AZ/ZWLh/KPIrwRP/xI6ET4HtW",
	"1qVkbkJ6bBdYk0M1PhaZkB7YRvDze/dBJwCjNeDLvbGN0EiNL3pgI+Fx79yMS8kUGt7RS1Fjju1ADXnX",
	"4j/kYMi8a2IiKHDEoBB48I7fb0P+Jr4l2INY/Atc10aGOOnZlPENfg8t8f8pHOtf9f93tsXDM/krOxNI",
	"I5eNHvCamCst2LbmEU1uQgMSDVN7h/qRUPush+D+2duN3Ol7dh1FmyO7f5J3dvrG4RI4rg35v+ranVUy",
	"uPkfiRMPph5outCIO5falaZQQ9vykNij2GSCToD9MrlYLJJjQp2kT22IDWLySSJngg5Atv5VnxKYGtlk",
	"MmH/CwwHpgzi6An91Yd0pX/VKWQuwQwOOTr/zucZ+Ol09sKwEcTeEJm/X15kLs+/gPMkyGfPk+dpw0iO",
	"0l9yyfHlVT6TyYzP0+BSPkOhiSg0vKFP0e+W57nsH7nCP7Klf2RLPkYzQnGKuVPHpxSsUgZJ+bN/ZEuS",
	"N/0jWzKAbY+AMVPrExMODQvYNsQTOHSgZxHz92Y2fxH3++9To/hUsyyvvzhv5O8LL51V37pPfiENZuAO",
	"bvTWlem4dls3rHJVPs8M4sLfiQsxMv9HgOp/XErGyIanX334suriwlkcCpQxvyjF9aABGQN0xVGcQkbs",
	"OafMMTQhBR40tWazHuHTexgi4fWkhnw6mUZmLwrCei+57gubvUN4ZAY/Cc03iKp/1WH+0jy/SsPkRXZ8",
	"mTy/Arnk6IuZTo6uRnB0kcmbYDTSEzqfho9eVazRnYHqqFJ6TjfKj+1Oq4wWqJdr5MtTgpq22eaf+938",
	"lH9+bpUztZl502qWWdnpLMCqfAFXFWrez+QcK/59bWWi8kXZLni1VnnJn4fF8kV5VkJGOm+1M9erXq6X",
	"b3QqrOuUaP2+c2NkO+lWtpQFrcr5qJnxwEvpqTvtzJ+dUq2RdT0jnS+OUPoc3F6eP7evbkZ3jWy9U82Z",
	"N/bKbF3fjm4sMFqXbo2WtazfVvPdtpvu3lXGIN1Dj8WKOMtzt53rNDM3xsxjvVyjUn/pravpBmt1S6yZ",
	"7l/3Z1c9o5h5hp2rdT/dy7emJgDpfO151rhpzDoPo3SJNlaZUgtbLWNdzlZv8w50JudNXMFNfN0YtUul",
	"7r0176dd0r13s71uv/rcrFw9FisUdJ9RHZWX/XsrZ2SvHtp2//bZWbZ6znLedK74OSqtWWVh3lVao2zm",
	"pW1f941Z/hF2a6XnzlWDw9C8txebO8HpVMqnDWe0vM8OR/jysWqDVG+RBrlX5t1XCw94CRazcg9798a8",
	"XpyC5XQ972QqttOrJrPF1qiYQdmOV2C18gOp26VK/uI+W0tfutXeVd3tZw1/Vrx/ylw/L9lDlRnnmc7C",
	"Lvd782mJrrvlW3hDSlfZkuMWG3fdtecvDOu6a355un3uuWNYKVWy13ACjDsLPr+OGy8vuXyjdrNK9uvG",
	"udmd+fMS7VyWm37hMvllaMAv9yCbb9KG32wA2hpXh9ePhYx/Uxg+XRW6U4ut7h7qD9nSzAc37fSL82I/",
	"dm/WF+aD+bC6alS8xhC32wazpx4oO5WXaa32VHAqr5k0ruTTmduHYfmienWdazXa9BXY9WvnfMa+JOdO",
	"aTgxbjMM1OfZgoFur56y19WZcZHLz8BNrpi/t1fd1lW+OTMvisPSwnWnz+15r91Lr77cvmZrLu6MZy/n",
	"fvPJuRy3b85HtDm96+L7au32cn1ezQ6f7Or5Q7NfQPCx4VQL015+2b186Q394gvN41HysukUhk9Je1rs",
	"1J+eCi83L7dLkF02l6NCZU57r13o32XL88KsmAajC5dM7de2M2t05/WXvIdfnsE8P69nX+uFSbHXtprl",
	"7ss6nexdWsa60W5OblqrZyd/tWp/Wb52XototShakxe7nss+LCwL0/HjsmbT6vV5/qVur63KU8bI3RQn",
	"X/rdL6P68PlLIX15N53Tl2XL+TJp39DklJndK6vVRLXKsz8crpvV0lOnU2u94nWmelMqQ5+hi7sKuuoU",
	"04Uh8V+YaRm1B3wxheWbzpWJq8uiMR09t/KvrHj7SpJto3g3v08PF+egaLm2WZ1c3t89wXazb4Hr5mNm",
	"hdmwnC5eFQo3JXhlOi+1i0Xx/tq/rBRXydZ5icCXht1pPnT8u+xdBV2y8bpQKlkX6MF6flneO/mHWmGI",
	"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",
	"//9Gw6wK77YAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
