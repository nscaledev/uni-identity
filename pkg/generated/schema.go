// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"sYHw1CsnJnV2Z8m/SqqvfEjXf/qYIyaD04ccbprStBphrpBjmcZmxLM4k7M4xYMawTDBwQapJgQixukU",
	"pzpcEbKiIwXibViqdXz71GdIkg1dYAIXBLEJiOA2EoDKprO5ZPpLMpdpZ9Jf84Wv+exAT+jSVCMtUEvE",
	"EMFQargONI6YvD5q8zqq7/Mfw3v+LOr8Nbv+9sFtv4NTfisBACFEf2r3SuyWUrcwFQITUv3sxfKZnwT/",
	"iVusYtpieUK9PqaCKNP6Z3BWGtZGYoTfruffruffruffruffruf/Ja5nuHYQhWzEJb/cZTqd0JEZywo6",
	"2866hqrXKf6lWb4m/dc64bTHvK8+1K3yA1wUeoO7wsSYDy776btt0ypvXraWVbe7z+OO81zPWbQ1L7N2",
	"+WZd71TTTcEvyplBqXLZ21QK/baxbvQ660ErM+u3p5mndnNWm9+5/XZlU2ult7V506pvp7lBb7Cob6fo",
	"tcV5UGYGeiu+wLdxduY92c3loHNjjXtlZ1wqzMfZNKf1Fnwoosb8Ltto32Xq21q+vr1jFduamaXKZa3d",
	"L9TaL/n69iVXa60QeK1v+b7AQzNtPNQunzbX1OxVLcMuWOZ9d/tkd7f97Mwy7Dob57qLJ7u+HPO94Bun",
	"n2tmDLvD10PMh+bK2JLlU87MmZsCNuxytv/anBlIrGvZfx3MzPvy5mk7s+t2p1CfV3L1+9qm36va9fld",
	"rt+uFRq3plXfNq1Gr5Ort02L03wj10ViffY1GaPCYpztFhUcvH722uV8oNhft0hxtfAeJzeOUyAZ5tjF",
	"zdt2tmg1v1zOxvNyplF6hHn01Lq8KT1fb1qDPuwmFzclM+3mDPOyux43CuXuS/W56V4t0m9XV9TIZqrF",
	"9qZ7tWgZdUyTmXnZLla918blFKSzmcd28wXfX17dXm0H9eunlV1rNWe5h+ey23jLP5UM++WulQUmrG4Y",
	"ub++vrJt12uvnPykSFdAVwKMH5lwAwGF9IOBBbESlOfOuGIipR9pj/CEvDPxLKFHUeh6FAtrV8S8Li0Y",
	"0ujhO3ulXY2IwYVrA2HD8kxhkRPhB74WpMwfaCLNIdIUzycPzBBCaPOw78CEP2kCUTKc9Ckc8xJFYSGt",
	"mb/OfBk3uu9yUL5bCZUZYJokOwoKDFKEJ+R8CJwOAQVj4rk7T0fguQ0vIhXSopQL34oLZY93PssDlXq4",
	"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",
	"tf7x4/8FAAD//zfZZ/50nQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
