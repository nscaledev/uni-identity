// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
