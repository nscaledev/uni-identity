// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9e2/qOtfnV4kyc3Rm9ALl2pZKRxoKhUILlPvldAs5iSGGxEntBAhb/e4j2wkkEFra",
	"vd/neUZz/toFfFleXpef11r2/imrlmlbGGKHync/ZRsQYEIHEv5pQSzXRtpL8CX7ToNUJch2kIXlO7kk",
	"uRi9uVDiTaV6JSUnZMR+sYGjywkZAxPKd8FIckIm8M1FBGrynUNcmJCpqkMTsJEdz2ZNqUMQXsjv7wnZ",
	"IguA0Q6wyT4iAkvhlhKb8wwd4XZfIuZdNIbUubc0BDl7VAKBA2tsaV3xG//Wwg7E/E9g2wZS+WRXS8po",
	"/Xk6haUsoeqIKaLrurc0TwpIlBxLEhNKQHA7dbKA94RPUzu0zO+Q9j8JnMt38v+4OkjHlfiVXkVY+BWq",
	"o7sUS71hLdAFBG+Tm80mObeImXSJAbFqaWyQnzLcAtM2IP/TBMiQ7+SlBVOKYS0W9P8A1YQp1TLlhPzm",
	"QuLJdzKB1LYwhTO2GX+xcV7ddDp7rRoIYmeGtL9urzO3+RuQT4JCNp/Mp1U1qaRvcsn5bbGQyWTm+TS4",
	"FX0I1BCBqjNzCfpLdxyb/pEr/ZGt/pGtuhitLIJT1F6aLiHAS6lWyl39ka1awHX07B/ZqgoMQwHqyp/f",
	"0uBM1YFhQLyAMxM6uqX91csWruN+/2upll9auu5MN/lu4bE0HnpT/TF5Y3Wpioe4O9k1lvPWQ1vV603R",
	"n6qWDf+ybIiR9l+cVf9lE2uODCi/Jy4UhPBmtfnu0zh5qGO2Ub5mQhVSCojH5IJAahlrJs5zqEECHKhJ",
	"vV5bsom1RhoksRLiWCv4myRkv8fynQwLt1q+mIbJ6+z8NpkvglxSudHSSaWoQOU6U9CAosgJmQ3DWnsN",
	"XampqI0a1U66W38eDPt1tEGTXLdQX1qoZ2gD9nk6KizZ506/nmmttEq/V6d1c7gBXv0aeg2iPa7EGB77",
	"vuVpqH5dN0pOq1/fsv6wXL+ur6pITRf0Qebem+Qmhe6wQUdmlbQfhxU1O0z3s9Us6DfySi/jgHH1ZbQc",
	"rjtmtdXN2o6aLpQVlM6Dh9t8Z1CsKLVutj1s5rSK4Wn9+welogNlV31Q+/q2/dAsjAZ2elRrzEF6gp7L",
	"Db6WzmiQG/YyFXXl0Emu22iPJ7tmukv7oyrtpaf301VxopYzHTgs7qbpSaG/1ABIF1qdVbfSXQ2flHSV",
	"dL1MtY/1vrqrZ5sPBROai3wPN3AP33eVQbU6etTX07RtjR7t7GQ0bXZ6jeJzuUHAqIPaqL6dPuo5NVt8",
	"GhjTh4657U/M7bpnFtk6Gv1VY6PVGn0lmxkPjPupuio8w1Gr2hkWu4yH2qOx2e8JTqdSLumayvYxO1Pw",
	"7XPTAKnJJg1yb9R5bJae8BZsVvUJdh7Vdbu8BNvlbj3MNAxz0kxmy32lnEHZoVOirfqT1TaqjcL1Y7aV",
	"vrWbk2LbnmZVd1V+fMncd7b0qUnVfGa4MerTyXpZJbtR/QFWrGoxWzXtcrc22jnuRtXvR9rNy0NnYs9h",
	"o9rI3sMFUGs67LzNu+NxrtBtVbzktK3mtdHKXVfJ8Lbec0u3yZuZCm8eQbbQI1231wWkP2/O7p9LGbdS",
	"mr0US6OlTr3aU/spW125oDJIj82x8Tyq7K61J+3JK3YbTneGBwOVGksH1M3GeNlqvZTMxlsmjRuFdObh",
	"aVa/bhbvc/3ugLwBo31v5lf0Jrk2q7OF+pChoL3OllT0UHzJ3jdX6nWusAKVXLnwaHijfrHQW2nX5Vl1",
	"Y9vLzmA9GUzS3s3DW7Zl4+F8Nc67vRfzdj6o5BXSW9ZG+LHZerjd5ZvZ2YvRzD/1piUEn7tms7ScFLaj",
	"2/Fk5pbHpICV5G3PLM1eksayPGy/vJTGlfHDFmS3va1SaqzJ5G0E3Vq2vi6tymmgXNvW0ngbmKvuaN0e",
	"Fxw87oB1Yd3OvrVLi/JkoPfqo/EunZzc6uquO+gtKn2vYxaK3uBm+zZ8KyNvU9YXY6Odyz5tdB2T+fO2",
	"ZZDmfb4wbhs7vfGSUXOV8uJmOrpR2rPOTSl9W1uuyXjbN28WgwpJLqk2Kur9Hmo1Ou5stus1qy/DYav/",
	"hneZZqVahy5F17UGKg7L6dLMcsdU09XWE75ewnplWNRwc1tWl0qnX3ij5Yc3KzlQy7X1Y3q2yYOybhta",
	"c3H7WHuBg95UB/e954yH6ayeLhdLpUoVFjVz3LrelB/v3dtG2Uv281ULjrvGsPc0dGvZWgPd0vmuVK3q",
	"1+hJ74y3j2bhqVWaIYvcN4YP7d44pz1fP7UH47lG7+f93SIHmtaDZ2eVRrEFgOrUzKrXmDaL8Lq57d0O",
	"tovW9dMjvKlprppu1arePXFzZaP5lr3fqXp7q+wqnZmFChOr526f7UXNyG1RY97CZeOt2n8bNxs3Bbe3",
	"Ss/aq6fF2nyEoNipdQGg28K49NyzgT1TV+XpujVZ1mbWVM+n88mn/tIGWdRYPLTUHRz0s9X88q1QJOVy",
	"aVCdDueem3tz7kuwYcL8cKFjpb8G9X5DsavwfuD1FpMn1a11Uu6601wiY4BuG6rm1WDuWQHOwjf6szUk",
	"aI4Y+pSno066WWssp7WJ1+rrq2ll4jWznU1r1/Ha/Um6VWump6PpsrkbFKbLrtmsrHbT5XDVqjRWreVQ",
	"by1L22llspv2h6vJbpJumq3ltGPJCXlBAHZmPi5kwMAiPlqacc/D/OEBY8h3MkcZd1dXvldj4OZKIIqr",
	"AE9c7s/DrvUDf94usfEl3lryMXFCUi1MXcORHB1KBBpwDbAj+U0B1qR2vVKWqA1VNPd9NJXmFpHmLnF0",
	"SCQNOgAZNNbnu7b2r8XZYsIPcbZo8h+FswOqP8XZ/CwjcC8/x0Qkrev/crQOB26dK90xDfnu5yktJYmD",
	"QbajpoB2nBcBsGPQTwMOkObEMrmIuJThu/eErADNZ9yZieMYGIb5hFhMKRFeAwNpM39mOSF+mUXpDOhS",
	"GO/8LpcriNCsBz5jzIZ0w4PPATKgJomuEp+IryEhWcRXEtFasyCVsOUwDXIAwq8YGMa+Bd/bOYKGRjm7",
	"VAvPDaT+IrOCUc5wCXBo7hIVShvk6JwYCkzID9YSMAgEmifBLaIO/Y3c86cMiKNicoAtZiASkktdYBie",
	"5OiISiYEmDLCPEkHaxglkXNqbhEFaRrEv8aq/TBneMUEmZ1wNYgdBAwqaRbfzT1V+120CVojAy4g/e0S",
	"twFU0iBGUJMUT/LVmfryJvgFPEmBkgpcKhox0iINX7Gw6D7xCC+i5PMTIzfZAEull/pekDkHmBTjPw/L",
	"fsWHo95h4ZKFeZfghCfZBnCYzeA7xqwLX+o3TdACYkiQKj32m88S3yvJBgshDQg7kGBg9CBZQ/LRLBfK",
	"BeUDzcTHeNHwTYBj+b5SNQAyf9vel7DkYri1ocrOzWK5lqq6hEAtuukg0tIhAFN28PX7AKy9YtaSuqoK",
	"ocb2iBkAh3gpqT4XIyG+uWzrVEBhQrINCCgTDtsijoQcCVA2DaLUFfxeblb0ewxeQY/Kd3//lFWylu/k",
	"l2Qhm5ET8oof0zPadkOtRndYuTd6imE1rI1TrLfubUfpWeao+zIhrSdPfSjNOqyP48l38kNZTjA1ZZuG",
	"GJ7bMu7VRiXFfbrHOP02pstbpGkjfbosJKf9Zr6a1wqkAZ8UxWjXhmqygButQZe+KDerZFN/eCPFTgkV",
	"lk9YuzFW5upxkDUxMDa08/IkJ2Q2Z6kE7bIx6t02refn8u6t2ckqRu5ps6vewN7kWVd7hK5uVxO3C1qt",
	"fMHEQ7dDH/O5Trv+/HBfGI/Bo+71et3FsAzM5mY6GmxKZJ1Zye8/LpYfxtsRVJ6g14OxsKckNXrtlrSB",
	"irSCnkShk5L6YrclwD5K1pzbU02yXcVAKmvGjC5wJEDY7s8hgVgVBoWN9YrZYFzaKRsLhjpKKsBMGrkB",
	"ciyJA2rPH83XEGbHKFrgwEQh+oqZoiFVSJVQiRffenxLwP4O4j71CpOnTCZ9Xczlbq+v80nbUtPqbUZb",
	"0LmrkTRRXHuZdrFLlurayWRhCtg2TS0sa2FAZvT8Kf2IooaobQCvJeLMNd5KqnO34HhyQua6QUKYHaiq",
	"5WInGNEfJoiX8++SKOj//uNrZmPPo/iNNxDluysa7+2xwBgiKli28BwtXPIRKPwFcHs6R+xZw4a4XuGQ",
	"YN9OSBB3RK5jJTVEVWsNicfWA7FmWwg7lJ85qGsz+wQ1hqkWFkGObopf5hA4LoH+ekNo+bsypVkm4OkG",
	"P8ZM7MNesq+S/lcBp1u/vM1hoj/Z5HDTlCQ1Lepwr00lqluuwUy+wfQfShaGCcY2SCSgmQhTprVMBxns",
	"M6Ij7Z152If7Z8jvGH6gMsAw4yP8E2P9J8b6T4z1nxjrPzHW/09irHBrIwLpjPnQ3HU6nZCRFusKBrvB",
	"tokaxRT7UqsWrcm4ZTHbo9Uajy2j+ghXhdH0oTBXl9PrSfph1zWqXmdnGC1z+KIM7JdWziC9ZZX2q/fb",
	"1qCR7nJ/Uc1My/XrkVcvTPrqtj0abKe9jD7pLzLP/a7eXD44k37da/bSu+aya7R2i9x0NF21dgs07jEf",
	"lNHBaMMIfFOyuvtsdtfTwb2hjKq2Ui4slWya2XoDPpZQe/mQbfcfMq1dM9/aPdC6aehauX7d7E8KzX4n",
	"39p1cs3eBoFxa8fWBR67afWxef3sFYk2ahiqWTC02nD3bA53k6xuqGaLKrnh6tlsrRW2FnxvT3LdjGoO",
	"GD2W9tjdqDtr/ZzTcppXwKpZzU7GXV1FnK71ZDzVtVrVe97pZsscFFrLeq5Va3qTUcNsLR9yk36z0K5o",
	"RmvXNdqjQa7V1wxm89XcEHH6zKKloMJKyQ5LPh/cSbboMD9Qmmx7Vmmzcp/m97ZdsDLUNkve205f9bo3",
	"17qyrGba5SeYR8+96/vyS9HrTSdwmFzdl7W0k1O16+FWaReqw07jpevcrtJvt7dEzWYapb43vF311BYm",
	"ycyyapYa7rh9vQDpbOap3+3g2vVt5XY3bRWfN2az19Vzjy9Vp/2Wfy6rZuehlwUabHjUqhWLt6bpuP2N",
	"nZ+XyAbIPoAJQvD3EBBIvhhBjwVjrqMziCfQjzjnuBzvzF2DI1ICHZdgfoqOhGXEyUgcpoKgrTivW3xw",
	"HhJDWDVcjZ/0eZw9wJP+sQrNxTFLhHDY5H7wEWoctLk4iABD7deiIj6GE7Goc9HFKC9ElOT3hUXiRg9C",
	"VYI8nys6oJIwOz4XKCQIz63LOfBxrQNQLNc5RMj2oe8wESle5uQvLQjFN3mxx2mZUy84zkhHLBTVITx3",
	"ArFrynd/B7UNFKoEOjPb4hHx6JcKoEiVfySOS51YO4DMj+bnDSLzAZdvN6+58f8NUmaaMO9yQp4DExnI",
	"8Wb8YJSQF2gNcfABAUeckuWEbFgqMGBwgkrINlLZcU1OyNRV4km2NFgOymE+ZyBrLu3LZ+IY2MsWrtnM",
	"BjvWxc3Ic3V9/u35eXgjifWNMis2szcnkOq+04ub8RDQOZ0yHMlJST0Io4m4xuipJ2mW6poQO75mxCff",
	"kANN+sn4cuI4pxbzRTT89OGAodATzxKxsST2Ac6RHwsCWIJbEcKVckSTbEAcT6IOwBogGn3FqmWayHEg",
	"TEnluFTkRYu3iWVD4vjlfSIS+fPAksuibSFuAEKAx1X8hD1xxVMnTHrmSbUgUyQMfgyhfqnbce++b3r+",
	"pBJvIQFNI5DyAbBrGEBhxlsUPp4IWxCoiB8Wbm1DRc4hkH8s4pqHgYlUpuQ8xCEnZBOpxKLW3IkVbr8g",
	"L24y/pMkmvKYjoH8sPohh+FXfgbxn5CIhspJD2nQvw/rC6b+EbNJYV9zQlrNTzeIMLoJKeXJhpPNie9d",
	"khxIKPR7+4uDWxtgjf3lx1Ye+/0XvwkzEymJ00J5+FUBVETrWUM/0x5JsCckxRWRWjEu1ERGjdFHEHQA",
	"5ypwXMoHF/n40kudSjzjxjADG9yiMBhX6KKYK7zbp8nXMKSYCb8jJ07ggYv3IbpZpBKTF++KMTloYZY/",
	"mnBxoGlbBBBkeDMXgzVAQp4PHfezBl9wY3w0a6jiIiFjy5nNLRdrciKcIhXeYcZ+BYZhbU5IN6GGQDDI",
	"IWEYJ+YxgOhYMoaQKIznvkRJ4lclSMjxET6X7/OJqfOC/nJW50v4OFR8KuiHsPrP03VHouMxvwfR8Zif",
	"cHyfo/X6SCE8z37UxIG2zxdP43T1fLw8cZl7OGLwiYuIjbqfUhIXDz/diSi+CGxivHH1VxQ0EgcFhJGD",
	"gAPpEdJMCfk2gSPfyS5B8jnwSGd77fiInfQIUV7KzX0m9ZiJsWXTFxITjwkPNF6813FYNIbWg+n5Mrd4",
	"V2GvmUkQ55mw77uIzgOCjaEuCL/MKFpghBczYCxma2C4F1Mr+kmhzMthAYzyeiXIFF5KsD9kKRgxlu69",
	"ITmVdV976ryJ9L8QpaK05n+n4gR5uVlRUWZ3sd7ArW1RSIOsZ8ACnjblm8U36lAMdIk+RfzilyUl6M0B",
	"mp+79ROx+xjAXo7OY6mLtieY65xIcU/+5RX4jBadLxcVjhpiiBBC/R2bSPepa7hVdcBshB+sCR3FuRHZ",
	"bzW9ZIOjFM3YgF8zXPSTuMCv2olQTCKGoUHY5DOeIk09cDTg5AIyZ3McM2FsDQVJ/qR+ueBnvDyCBHvv",
	"f8YfnghD3GJCdiBGgmPc3Qcae+len/MNl1rlC/xgLA4KF5x+dsnuFHUEKfCYjuL4KRr42sQjlHPEIIZh",
	"iGx0rBUO0N+Za4ex9/7OHmZb8YPhQ8B0f6ANdCayZhGjMF3q+HVVR3jwHAVxWPWzHfgYh0ZS+heD0EhF",
	"8akqRwz4B1GtqFOJhB1FLEvEsEI5HCGRUuRD6Ec/TB3XOvwttjCMPVUJa/8BxQfvEVAq4HYoZhlcf4sd",
	"/xh4fDTVCe4JT/vQK2SysXP4ya4TxA8i1fbUNZwYwB8pnYg1vzZg6hKNPcedT0N5uLhxHGRCCWGJQtXC",
	"Gg25lQ0yDMkA1GGqExobYQcuxJHnkNKLUUGeuAgwYeq8o3RihfPR2pxG+BH7g2mqTSCF2DlEjfb1zSKq",
	"8LnKhuZORNkd4VmcUsddqzih3wpvc9hDWxi257zEKLrl4asiPz+KLP84Xoqvo4fbj0e3So4vvPx4T1w2",
	"uQ0o3VhEO52SmfcglH9o9CM+gsAvZB7zp8x/kuqVlNQNKpL3temvnOJX+Sjc/mmMU9zm/BmTQTqgYBF2",
	"+71zhi4TnVknt39Bq985fXTnLkhbSFLTd3cQ8ajgfmaL/R1s56sc73iD3T6ZbF/ub20wJFLQMH6th1m+",
	"ut7ofakz3A4aSYNu/Xcyey/2n60+aPh7V3+khKGtPzVTzMlB1SXI8XoMLQiFFFYpmlKNDUr5lZn+dDQI",
	"Rys8f+5btZhQkmFtTgNWZV8rI18OiBEqnQ3gWsq/V59UDcvVUhZZBLff1tmrSP89eJfvfgY2+RtjBgn+",
	"A//4TyIRzQ4O8V5zIIbclwNLpZd6ABrpPmvPEJuB2Abz2wpzoIqjpEv9ezjAMF5xMJZfFy3qWW1ibRGk",
	"KUkqUQk5f1I+BA/5s95InAFN13BQ0oGYzcGX94o1aBuWZzKcyOv4VYf6xfxgsSBwITbWAJ6PiUVq4JCC",
	"E/f6fFoSr1hD1AaOqjMIZITTV/Tge30R510VoK4g5sE1BzlMluU4bskJeQ0JFSxNpzKpdBAzBTaS7+Rc",
	"Kp3Kcffi6FykrlIbaBjJFbY22K82TqofB1frpm1AwQlO2r6ymBG3iEtidiHwMVC0A793EpxxPIEGj+50",
	"7SuVE+IGRugQHwGOVqBcdY3nnJwRNIwntqp2TMD46GJfNp0+dybYt7v6qNz7nQv2FbDR1ToT6IH9QaTc",
	"YCotmQCDBWdlbNBc4tUs+zOXLz0crnk2UoFheK+YwAWiDtzbQhB3Stvo1kGPXCoBSWCIoCn3n6+Yq4hF",
	"KVIMj19tUAn0wzobKGEogGHIQMHQJcWze+8X7OwPZSfkxW9gyUbDTPso5/CtjTtzG+I9IefTmc/7x5b9",
	"vCfkwiWTf3ShKuxNOHSN9yN//3j/ERGvT06/sbJ1VNvejlSoAwIPkQa/juAVh6MRvixGAhShSB+xXAfG",
	"2DHwipnhSkJhe4UwwtQiJfkXPywiNYN8tz/Hvp0JPIknEl9x9GKDn3uRmGCJFvTo6oM1l+YIw+SCAF4Z",
	"IU4ifByHWMYhJyyeYwqH1vb1R4IhByllTsMJjkivGIhyJT9IzEMgHKMwZuNoPISbrkM4RDKhqfCWr5gv",
	"xWfx5RoUvV+wv2jECNCuxMbvLy8GynlGvyKy9C3tir0V8v+UbiVkXvh1TpP4u0y+VMVcGo8y9sWi5zgb",
	"vIrlnV9Z6OGsq/MvVL2f7FPmTDQjHPWLFlManv/elCjq+6XNyqdzn3c+vWfMexY/73lyl/s/xfZe/Qx/",
	"fP/HFP/LTDFHsIcX+P6Ol4RDk6v4F/J4aMU9r/lH2u5HycT7EVqM7rsxqt8+fUnvS2bg/AMa7/Hm+ujQ",
	"GaY/ov7+MkJV1f9OW/D71fGKC9R3AJIQRZqS+FMqNBC7MLR+xSawbXZi4ULqv4ASrsR0wtD9UP9nMXTg",
	"++wNYgdVBgk07QCtDzE1kRsVt8X3N32DYwCDI/v4rLj+6ysqO8meKpNjSci0Db5edsTn1XPz/Qj0C/BD",
	"sOeAO4JVx+aCLoMe4Q+C6/Il0l06oiksv8cV57ycIPIExQaSvY3TUl+FDL/L/lwMPSQMN4eXdi6BHWe4",
	"+i0gEnlW6CIEwnvEQo6zNufre7a3OPE1vX5IR1gboauCp3gRFZli/BhCj6JPuaT+G63V1U//BVgfTRjQ",
	"gWelg+kab3IAp5zC/eJO5aTCR7xEUmqhl2gjO52/aKcF6f/yzRXsONrcTDp+jENlj2+9gyeGOBe/ahD+",
	"cTKXOZnfYjgTn3Y8eZP5U7Dnr+dXQd6p+nwL8X1ib9MXaeFnGO/fZ2/z//0qySzvuTTHh0Ft/zW+yPVC",
	"UUp6FiS97JMU0dIyxvjoQIBKNiRnLyOkXjEvnrEBcZDqGoBwjYKHOzn75BE4JNz4TaBAQkS46eWp/JB6",
	"xRPL5foqJvH8VJmIZb/K/lVHxM45vuXgL1MBHBSBli2Moeq84qO7koE0SZrLr2TwTGxQ8BcL+kQod5gt",
	"HeWbvh5yin+H7z0h59LZOIy4z1uyA3CQXvGrS6EmBS9ASoPusy+dFxBx+grXpWGJmJ7vR8K63Kzo53fB",
	"IgUQH2N3LPHqJWaMw28UHT0y1Bj1T/zBK947BEgSHOP7F1oPnke8MXN8GZd+KAYNtsTv7H7kyazfEwo6",
	"4j4PnsQI0tyBoafcdOTQ0+fh9nuSkICkIWBYC2YTw5U1r3gBDxdej2+d8SdCeWQE0YOWhSX3AA+CjNAa",
	"AeG2/TEiCm1Dwp+bjASMzCD3yJNqDDUt+JuYrhNGBuIlM4tw5TnBGdyZx55eejCoeeIFi3/u0Y0WXevx",
	"ivawI/Z8E0gOv+33HccaeTX/2KV+Zjt8Ug83vE5x16BbT51K05lSrlOHc2JC45kbcTUHufNLAaOVXYcK",
	"7GOv84ojbidcR3FaHBVUVPCH7g4uWpj+Vxz1ecL9RN3H8U17XgQHDGqJAnsfmEgSc35nSzn4e2usT/R+",
	"ROjCOZU2OsMrLhV0cWOpEGvDkQnea2v44rthbaQNf91JgczVEqCyH42IqXvFIrfqOpYpfIZlmmyZBsIw",
	"yKWKSKZjWQbCi4SkWxu45jwXT8Vhy3nFBLKeouIA8EqC4C5EGHT5ssZfj2SzMADE354SVEgOcSl/rutQ",
	"XxCrned1qO/X5H1ZhyL/r8D7d+x39OmrS91tzPu3/wE5piNVD8rizztixEw70zwufJ+W9H/q2L8x3lmP",
	"PAio/86unrwK8Wu781WYjzT18JL3R7Z2X4SyL84W99n8vmcZzuzSk6tAgqEDqdTzPa9vuo8g+v7UcjjU",
	"e5LwI8fW8gQ7pSSp7kgIUwcCTQo8s0jhHOqJQng8lJ/mJ4f95REQnGsPVuLUZbxiJ2KEA9sTs1ZmiQKH",
	"ogUv3EYNe7x8IU0tB3vzRa8bxj2BIQ/KXE4Xk/ptav3+/n8DAAD//1l99fzyaQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
