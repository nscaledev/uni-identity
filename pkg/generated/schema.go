// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
