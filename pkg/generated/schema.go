// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
