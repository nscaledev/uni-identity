// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"zICbEge5hiV+mUDgeg6U54042z5DrjqxAM/gkMFtx97eJPsqKb8K4Fz/UQo64cIr4n1VLeK++awr4yed",
	"89tnDnoKlcNDU4pSI9TlhhBVqEE8k2lJJhOZUCEYJhhyQEfhGjVlgo6JLWZJm9GZNvZR2CyyAwfnZ5DF",
	"gi7QgQs2uTmI4DbigMqms7lk+ksyl2ln0l/zha/57EBNqMLXJ1yYC0QRwVC4SGyoHfCZftRpetBhxH4M",
	"n/mzqPPHnPrbB499AqeCURwA3Ar71Oml3SbMNu5rBkzwnb1ZtvITV2DiNiu1Pr497p85ZMPK2MxncFZ4",
	"Zkd8hl+5C79yF37lLvzKXfiVu/AfkrsAVzZyIB0xzS93mU4nVKTHioLOurOqoep1in2pl69J/7VOGO/R",
	"76sPdbP8AOeF3uCuMNFmg8t++m7dNMv+y9o061b3edyxn+s502nNyrRdvlnVO9V0k8uLcmZQqlz2/Eqh",
	"39ZWjV5nNWhljH57mnlqN43a7M7ttyt+rZVe12ZNs76e5ga9wby+nqLXFpNBGQP0lmyDb+Os4T1ZzcWg",
	"c2OOe2V7XCrMxtk04/UmfCiixuwu22jfZerrWr6+vqMVyzT0UuWy1u4Xau2XfH39kqu1lgi81tfsXOCh",
	"mdYeapdP/rWj96qmZhVM/b67frK6637WMDWrTse57vzJqi/G7Cz4xu7nmhnN6rD9EP2hudTWZPGU03O6",
	"X8CaVc72X5uGhvi+Fv3XgaHfl/2ntWHVrU6hPqvk6vc1v9+rWvXZXa7frhUat7pZXzfNRq+Tq7d1k/F8",
	"LddFfH/WNRmjwnyc7RYlHLx+9tplcqDYX7VIcTn3Hic3tl0gGWpbRf9tbcxbzS+XxnhWzjRKjzCPnlqX",
	"N6Xna7816MNucn5T0tNuTtMvu6txo1DuvlSfm+7VPP12deVo2Uy12Pa7V/OWVsdOMjMrW8Wq99q4nIJ0",
	"NvPYbr7g+8ur26v1oH79tLRqraaRe3guu423/FNJs17uWlmgw6pPyf319ZVluV57aecnRWcJVKnABKkt",
	"NxA40PlgZkqsBuW5BjNMhPYjHFoe13cmnsmtRQe6noO5uzQSnxEuMOE1C7IFhGOW8Ml5bAxhzfR07tLl",
	"+SuBFST9Z2gi/GkilsMW3/ixuNLm4SACDn/QhyZ1OBGUOhRmjMJCuMN/nv87bvYgZiWD/wIqBqCKYDsS",
	"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",
	"/78AAAD//4Wet/D/sQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
