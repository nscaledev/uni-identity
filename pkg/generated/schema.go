// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8/opW3EAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
