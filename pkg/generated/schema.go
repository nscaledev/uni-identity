// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
