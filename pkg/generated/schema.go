// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
