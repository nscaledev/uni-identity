// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mock/interfaces.go -package mock
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	openapi3filter "github.com/getkin/kin-openapi/openapi3filter"
	authorization "github.com/unikorn-cloud/identity/pkg/middleware/authorization"
	openapi "github.com/unikorn-cloud/identity/pkg/openapi"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthenticator) Authenticate(r *http.Request, token string) (*authorization.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", r, token)
	ret0, _ := ret[0].(*authorization.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticatorMockRecorder) Authenticate(r, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticator)(nil).Authenticate), r, token)
}

// MockACLProvider is a mock of ACLProvider interface.
type MockACLProvider struct {
	ctrl     *gomock.Controller
	recorder *MockACLProviderMockRecorder
}

// MockACLProviderMockRecorder is the mock recorder for MockACLProvider.
type MockACLProviderMockRecorder struct {
	mock *MockACLProvider
}

// NewMockACLProvider creates a new mock instance.
func NewMockACLProvider(ctrl *gomock.Controller) *MockACLProvider {
	mock := &MockACLProvider{ctrl: ctrl}
	mock.recorder = &MockACLProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockACLProvider) EXPECT() *MockACLProviderMockRecorder {
	return m.recorder
}

// GetACL mocks base method.
func (m *MockACLProvider) GetACL(ctx context.Context, organizationID string) (*openapi.Acl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetACL", ctx, organizationID)
	ret0, _ := ret[0].(*openapi.Acl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetACL indicates an expected call of GetACL.
func (mr *MockACLProviderMockRecorder) GetACL(ctx, organizationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetACL", reflect.TypeOf((*MockACLProvider)(nil).GetACL), ctx, organizationID)
}

// MockAuthorizer is a mock of Authorizer interface.
type MockAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerMockRecorder
}

// MockAuthorizerMockRecorder is the mock recorder for MockAuthorizer.
type MockAuthorizerMockRecorder struct {
	mock *MockAuthorizer
}

// NewMockAuthorizer creates a new mock instance.
func NewMockAuthorizer(ctrl *gomock.Controller) *MockAuthorizer {
	mock := &MockAuthorizer{ctrl: ctrl}
	mock.recorder = &MockAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizer) EXPECT() *MockAuthorizerMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAuthorizer) Authorize(authentication *openapi3filter.AuthenticationInput) (*authorization.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", authentication)
	ret0, _ := ret[0].(*authorization.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthorizerMockRecorder) Authorize(authentication any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuthorizer)(nil).Authorize), authentication)
}

// GetACL mocks base method.
func (m *MockAuthorizer) GetACL(ctx context.Context, organizationID string) (*openapi.Acl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetACL", ctx, organizationID)
	ret0, _ := ret[0].(*openapi.Acl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetACL indicates an expected call of GetACL.
func (mr *MockAuthorizerMockRecorder) GetACL(ctx, organizationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetACL", reflect.TypeOf((*MockAuthorizer)(nil).GetACL), ctx, organizationID)
}
