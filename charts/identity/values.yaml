# Set the global container repo.
repository: ghcr.io

# Set the global container repo organization.
organization: unikorn-cloud

# Set the global container tag.
# Defaults to the chart revision, which should be in lock-step with the
# actual release.
tag: ~

# Set the image pull secret on the service accounts of all the controllers.
# This is an alternative to dockerConfigs, but unlikely to play ball with
# ArgoCD as it's a foreign object that needs pruning.
imagePullSecret: ~

# Allows override of the global default image.
image: ~

# Organization controller specifc configuration.
organizationController:
  # Allows override of the global default image.
  image:

# Oauth2 client controller specific configuration.
oauth2clientController:
  # Allows override of the global default image.
  image:

# Project controller specific configuration.
projectController:
  # Allows override of the global default image.
  image:

# Sets the DNS hosts, X.509 certificate subject alternative names and
# oauth2 issuer etc.
identity:
  host: identity.acme.org

onboarding:
  # Allow new users to authenticate without being part of an organization
  authenticateUnknownUsers: false

# Issuer related configuration.
issuer:
  # maxTokenDurationDays defines the maximum length of time an issued JWT
  # can last for.  Due to key rotation by cert-manager, the certificate will
  # live twice as long as this value, but refresh at this age, so JWT tokens
  # issued just before the rotation will function for their lifetime (or near
  # enough).
  maxTokenDurationDays: 90

# A static list of registered client applications.
# clients:
#   # Must be a valid Kubernetes resource name.
#   foo:
#     # A redirect URI to return control back to the client.
#     redirectURI: http://app.acme.org
#     # An optional, trusted, login dialog.
#     loginURI: http://app.acme.org/login
#     # An optional, trusted, error dialog.
#     errorURI: http://app.acme.org/error
#     # An optional, trusted, home screen.
#     homeURI: http://app.acme.org

# A static list of registered oauth2 providers.
# providers:
#   # Must be a valid Kubernetes label name.
#   google-identity:
#     # A human readable name, most often used for UIs.
#     description: Google Identity
#     # Must be one of {google,microsoft}
#     type: google
#     # The issuer is usually provided by the oidc provider and will have
#     # a discovery endpoint attached to it at /.well-known/openid-configuration.
#     issuer: https://accounts.google.com
#     # The client ID assigned by the identity provider.
#     clientID: foo.apps.googleusercontent.com
#     # The client secret assigned by the identity provider.
#     clientSecret:  GOCSPX-akjfdns3238r328r9832rewjbds

# platformAdministratorRole is a role that can be implicitly added to users
# and service accounts.
platformAdministrators:
  # Protected role as defined below to grant.
  roles:
  - platform-administrator

  # Subjects the role applies to, must be the canonical name from the IdP
  # and not an alias.
  subjects: []

# System accounts map X.509 Common Names to roles.
systemAccounts:
  unikorn-kubernetes: infra-manager-service
  unikorn-compute: infra-manager-service

# A static list of roles.
# Any unscoped API resources are to be managed by the platform operator
# and are assumed to be read only for all.  Global permissions are applied
# regardless of organization or project scoping.  Organization permissions
# are applied to the organization, regardless of project scoping etc.
roles:
  # A platform-admin can do anything anywhere.
  platform-administrator:
    description: Platform administrator
    protected: true
    scopes:
      global:
        identity:organizations: [create,read,update,delete]
        identity:oauth2providers: [create,read,update,delete]
        identity:roles: [create,read,update,delete]
        identity:serviceaccounts: [create,read,update,delete]
        identity:users: [create,read,update,delete]
        identity:groups: [create,read,update,delete]
        identity:projects: [create,read,update,delete]
        identity:quotas: [create,read,update,delete]
        identity:allocations: [create,read,update,delete]
        region:regions: [create,read,update,delete]
        region:flavors: [create,read,update,delete]
        region:images: [create,read,update,delete]
        region:externalnetworks: [create,read,update,delete]
        region:identities: [create,read,update,delete]
        region:networks: [create,read,update,delete]
        region:securitygroups: [create,read,update,delete]
        region:servers: [create,read,update,delete]
        kubernetes:flavors: [create,read,update,delete]
        kubernetes:images: [create,read,update,delete]
        kubernetes:clustermanagers: [create,read,update,delete]
        kubernetes:clusters: [create,read,update,delete]
        compute:flavors: [create,read,update,delete]
        compute:images: [create,read,update,delete]
        compute:clusters: [create,read,update,delete]
        application:applications: [create,read,update,delete]
        application:applicationsets: [create,read,update,delete]
  # An infrastructure manager service is a role primarily for Kubernetes like
  # services that can manage identities and physical networks on behalf of a cluster.
  infra-manager-service:
    decription: Infrastructure manager service
    protected: true
    scopes:
      global:
        identity:allocations: [create,read,update,delete]
        region:identities: [create,read,delete]
        region:regions: [read]
        region:flavors: [read]
        region:images: [read]
        region:externalnetworks: [read]
        region:networks: [create,read,delete]
        region:servers: [create,read,update,delete]
        region:securitygroups: [create,read,update,delete]
  # An application manager is a role primarily for the application service that
  # needs to be able to see the Kubernetes clusters it's deploying applications
  # on to.
  application-manager-service:
    description: Application manager service
    protected: true
    scopes:
      global:
        kubernetes:clusters: [read]
  # An administrator can do anything within an organization.
  administrator:
    description: Organization administrator
    scopes:
      organization:
        identity:organizations: [read,update]
        identity:oauth2providers: [create,read,update,delete]
        identity:serviceaccounts: [create,read,update,delete]
        identity:users: [create,read,update,delete]
        identity:roles: [create,read,update,delete]
        identity:groups: [create,read,update,delete]
        identity:projects: [create,read,update,delete]
        identity:quotas: [read]
        region:regions: [read]
        kubernetes:flavors: [read]
        kubernetes:images: [read]
        kubernetes:clusters: [create,read,update,delete]
        compute:flavors: [read]
        compute:images: [read]
        compute:clusters: [create,read,update,delete]
        application:applications: [read]
        application:applicationsets: [create,read,update,delete]
  # A user can view projects they are a member of and
  # provision clusters.
  user:
    description: Project user
    scopes:
      organization:
        identity:quotas: [read]
        region:regions: [read]
        kubernetes:flavors: [read]
        kubernetes:images: [read]
        compute:flavors: [read]
        compute:images: [read]
      project:
        identity:projects: [read]
        kubernetes:clusters: [create,read,update,delete]
        compute:clusters: [create,read,update,delete]
        application:applications: [read]
        application:applicationsets: [create,read,update,delete]
  # A reader can view projects they are a member of and view
  # kubernetes clusters.
  reader:
    description: Project reader
    scopes:
      organization:
        identity:quotas: [read]
        region:regions: [read]
        kubernetes:flavors: [read]
        kubernetes:images: [read]
        compute:flavors: [read]
        compute:images: [read]
      project:
        identity:projects: [read]
        kubernetes:clusters: [read]
        compute:clusters: [read]
        application:applications: [read]
        application:applicationsets: [read]

# Quota metadata and defaults are defined here.  Quotas are extensible
# so you can create 3rd party quota resources externally.
quotas:
  clusters:
    displayName: Clusters
    description: All cluster types e.g. Kubernetes, compute, etc.
    default: 5
  servers:
    displayName: Servers
    description: All physical and virtual machines.
    default: 10
  gpus:
    displayName: GPUs
    description: General purpose GPUs for AI workloads.
    default: 40

ingress:
  # Sets the ingress class to use.
  class: ~

  # clusterIssuer to use.
  # This defaults to the self-signed CA defined in Unikorn core.
  clusterIssuer: unikorn-issuer

  # If true, will add the external DNS hostname annotation.
  externalDns: false

smtp:
  # SMTP host to connect to, absolutely must use SSMTP to guarantee the token is
  # not exposed in plaintext.
  # host: smtp-relay.gmail.com:465
  
  # Secret containing username and password fields for SMTP.  Refer to your provider's
  # documentation fot enabling SMTP relays and generating passwords.
  # credentialsSecret: unikorn-smtp-credentials

signup:
  # Enable email base signup flow, when enabled new users are added in the pending state.
  # An Email is sent out to them to notify their addition with a link that transitions
  # the user account to active/verfified.
  # enabled: true

  # Defines the litetime of a signup token.  Must be a valid Go duration string.
  # tokenDuration: 24h
  
  # Define a config map that contains email verification subject and template
  # fields.
  # emailTemplateConfigMap: unikorn-email-verification-template-configmap

  # Defines the redirect address when a user has verified their email account.
  # verifiedRedirectURI: https://console.unikorn-cloud.org

# Allows CORS to be configured/secured
# cors:
#   # Broswers must send requests from these origin servers, defaults to * if not set.
#   allowOrigin: ['*']
#   # How long to cache the CORS preflight for, mostly useless as browsers override this.
#   maxAge: 86400

# Sets the OTLP endpoint for shipping spans.
# otlpEndpoint: jaeger-collector.default:4318
